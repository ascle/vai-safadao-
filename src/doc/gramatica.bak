Package compilador;
 
Helpers     
    hcharmin = ['a' .. 'z']+;
    hcharmai = ['A' .. 'Z']+;
    hchar = hcharmin|hcharmai;
    hdigito = ['0' .. '9']+;
    hdigito_octal = ['0' .. '7']+;
    hdigito_hexadecimal = (['0' .. '9'] | ['A' .. 'F'] | ['a' .. 'f'])+;
    hqualquer_char = [0x0 .. 0xffff];
    
    hunderscore = '_';
    
    hcr = 13 ;
    hlf = 10 ;
    htab = 9 ;
    hblank = ' ';
    hponto_e_virgula = ';';
    hidentacao = [10 + htab];
    /* hbarran = '\n'; */
    hchar_ignored = hcr|hblank|'\n';
    hnao_cr_lf = [hqualquer_char - [13 + 10]];
    hnao_estrela = [hqualquer_char - '*'];
    hnao_estrela_barra = [hnao_estrela - '/'];    
 
Tokens
    tnumero = hdigito+;
    tnumerooctal = '0' hdigito_octal+;
    tnumerohexa = '0' ('x'|'X') hdigito_hexadecimal+;
    
    tcomment_line = '//' (hnao_cr_lf)*;
    tcoment_bloco = '/*' hnao_estrela* '*'+ (hnao_estrela_barra hnao_estrela* '*'+)* '/';
    
    tnome_programa = hcharmai (hcharmin|hcharmai)*;
    
    tstring = ''' [hnao_cr_lf - ''']+ ''';
    
    tespaco = ' ';
    tquebra = hlf;
    
    tidentacao = hidentacao;
    
    tadicao = '+';
    tsubtracao = '-';
    tbarra = '/';
    testrela = '*';
    
    tmenor = '<';
    tmenor_igual = '<=';
    tmaior = '>';
    tmaior_igual = '>=';
    
    tseta = '<-';
    tigual_igual = '==';
    tdiferente = '!=';
    tigual = '=';    
 
    tponto_e_virgula = hponto_e_virgula;
    tdelimitador = hponto_e_virgula;
    tvirgula = ',';
    tabre_paren = '(' ;
    tfecha_paren = ')' ;
    tabre_colchete = '[' ;
    tfecha_colchete = ']' ;
    tabre_chave = '{' ;
    tfecha_chave = '}' ;
    tabre_coment = '/*' ;
    tfecha_coment = '*/' ;
    tponto = '.';
    tdoispontos = ':';
    
   tand_logico = '&&';
   tor_logico = '||';
   tnot_logico = '!';
   tdeclaracao_atribuicao = ':=';
   tellipsis = '...';
    
   tdefault = 'default';
   tcase = 'case';
   tif = 'if';
   telse = 'else';
   tfunc = 'func';
   tdefer = 'defer';
   treturn = 'return';
   trange = 'range';
   tfor = 'for';
   tvar = 'var';
   tconst = 'const';
    
   tbool = 'bool';
   tint32 = 'int32';
   tint64 = 'int64';
   ttipo = ('bool' | 'int32' | 'int64');
    
   tidentifier = (hunderscore|hchar) (hchar|hdigito)*;
   tchar_ignored = hchar_ignored | hlf;
    
    
Ignored Tokens
	tchar_ignored,
  tcomment_line;

Productions 

  pprogram = { pprogram_loop } ;
  pprogram_loop =  ptop_level_decl tdelimitador;
  ptop_level_decl = pdeclaration | pfunction_decl | pmethod_decl  ;

  pdeclaration = pconst_decl | pvar_decl ;

  pfunction_decl = tfunc pfunction_name pfunction_decl_agrup ;
  pfunction_decl_agrup = pfunction | psignature;
  pfunction_name = tidentifier ;
  pfunction = psignature pfunction_body ;
  pfunction_body = pblock ;

  pmethod_decl  = tfunc preceiver  pmethod_name;  
  pmethod_decl_agrup = pfunction | psignature;
  preceiver  = pparameters ;
  pmethod_name = tidentifier ;
  pparameters = tabre_paren pparameters_op? tfecha_paren ;
  pparameters_op = pparameter_list tvirgula?;
  pparameter_list =  pparameter_list_loop | pparameter_decl  ;
  pparameter_list_loop = pparameter_list tvirgula pparameter_decl;
  pparameter_decl = pidentifier_list? ptype ;

  pidentifier_list =  {pidentifier_list} tvirgula | tidentifier ;

  pconst_decl = tconst pconst_decl2 ;
  pconst_decl2 = pconst_spec_ident | tabre_paren pconst_decl3;
  pconst_decl3 =  { pconst_decl_conteudo } tfecha_paren;
  pconst_decl_conteudo = pconst_spec_ident tdelimitador;

  pconst_spec_ident = pidentifier_list pconst_spec;
  pconst_spec =  {pconst_spec2} pconst_spec2;
  pconst_spec2 = { ptype } ptype tigual pexpression_list;

  pexpression_list = {pexpression_list_loop} | pexpression ;
  pexpression_list_loop = tvirgula pexpression;

  pexpression = punary_expr | pexpression pbinary_op pexpression ;
  punary_expr = pprimary_expr | punary_op punary_expr ;
  pbinary_op = tor_logico | tand_logico | prel_op | padd_op | pmul_op ;
  prel_op = tigual_igual | tmenor | tmaior ;
  padd_op = tadicao | tsubtracao ;
  pmul_op = testrela | tbarra ;
  punary_op = tadicao | tsubtracao | tnot_logico ;

  ptype = ptype_name | ptype_list | tabre_paren ptype tfecha_paren ;
  ptype_name = tidentifier ;
  ptype_list = parray_type | pfunctionptype ;

  parray_type = tabre_colchete parray_length tfecha_colchete pelement_type ;
  parray_length = pexpression ;
  pelement_type = ptype ;
  pfunctionptype = tfunc psignature ;

  psignature = pparameters presult? ;
  presult = pparameters | ptype ;
  pparameters = tabre_paren pparameters_opcional? tfecha_paren ;
  pparameters_opcional = pparameter_list tvirgula? ;
  
  pparameter_list = pparameter_list_loop | pparameter_decl ;
  pparameter_list_loop = pparameter_list tvirgula pparameter_decl;
  pparameter_decl =  pidentifier_list? ptype ;  

  pvar_decl = tvar pvar_decl_agrup;
  pvar_decl_agrup = pvar_spec | tabre_paren pvar_decl_agrup_paren;
  pvar_decl_agrup_paren = { pvar_decl_agrup_loop } tfecha_paren;
  pvar_decl_agrup_loop = pvar_spec tponto_e_virgula;
  pvar_spec = pidentifier_list pvar_spec_agrup ; 
  pvar_spec_agrup = ptype pvar_spec_agrup_opc? | tigual pexpression_list;
  pvar_spec_agrup_opc = tigual pexpression_list;



  




  pprimary_expr = poperand | pconversion | pprimary_expr pindex | pprimary_expr parguments ;
  poperand = pliteral | tidentifier | tabre_paren pexpression tfecha_paren ;

  pliteral = pbasic_lit | pcomposite_lit | pfunction_list ;
  /* nÃ£o entedi a linha abaixo int_lit */
  pbasic_lit = tnumero;

  pcomposite_lit = pliteral_type pliteral_value ;
  pliteral_type = parray_type | tabre_colchete tellipsis tfecha_colchete tpelement_type ;
  pliteral_value = tabre_chave pliteral_value_opc? tfecha_chave ;
  pliteral_value_opc = pelement_lit tvirgula?;
  pelement_lit = pelement_lit_loop | pkeyed_element;
  pelement_lit_loop = pelement_lit tvirgula pkeyed_element;
  pkeyed_element = pkeyed_element_opc? pelement ;
  pkeyed_element_opc = pkey tdoispontos;
  pkey = pfield_name| pexpression | pliteral_value ;

  pfield_name= tidentifier ;
  pelement = pexpression | pliteral_value ;

  pfunction_list = tfunc pfunction ;

  pconversion = ptype tabre_paren pexpression tvirgula? tfecha_paren ;
  pindex = tabre_colchete pexpression tfecha_colchete ;
  parguments = tabre_paren parguments_corpo? tfecha_paren ;
  parguments_corpo = parguments_corpo_agrup tellipsis? tvirgula?;
  parguments_corpo_agrup = pexpression_list | ptype tvirgula pexpression_list?;

  pblock = tabre_chave pstatement_list tfecha_chave ;
  pstatement_list = { pstatement_list_loop } ;
  pstatement_list_loop = pstatement tponto_e_virgula;

  pstatement = pdeclaration | psimple_stmt | preturn_stmt | pblock | pif_stmt  | pfor_stmt ;

  psimple_stmt = pempty_stmt | pexpression_stmt | passignment | pshortpvar_decl ;
  pempty_stmt = ;
  pexpression_stmt = pexpression ;
  passignment = pexpression_list igual pexpression_list ;
  pshortpvar_decl = pidentifier_list tdeclaracao_atribuicao pexpression_list ;

  preturn_stmt = treturn pexpression_list? ;

  pif_stmt  = tif pif_stmt_opc? pexpression pblock pelse? ;
  pif_stmt_opc = psimple_stmt tponto_e_virgula;
  pelse = telse pelse_agrup;
  pelse_agrup = pif_stmt  | pblock ;

  pfor_stmt = tfor pfor_stmt_opc? pblock ;
  pfor_stmt_opc = pcondition | pfor_clause | prange_clause;
  pcondition = pexpression ;
  pfor_clause = pinit_stmt? tponto_e_virgula pcondition? tponto_e_virgula ppost_stmt? ;
  prange_clause = prange_clause_opc? trange pexpression ;
  prange_clause_opc = pexpression_list igual | pidentifier_list tdeclaracao_atribuicao;

  pinit_stmt = psimple_stmt ;
  ppost_stmt = psimple_stmt ; 

   