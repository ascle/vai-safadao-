/* This file was generated by SableCC (http://www.sablecc.org/). */

package compilador.node;

import compilador.analysis.*;

@SuppressWarnings("nls")
public final class APmethodDecl extends PPmethodDecl
{
    private TTfunc _tfunc_;
    private PPreceiver _preceiver_;
    private PPmethodName _pmethodName_;
    private PPmethodDeclAgrup _pmethodDeclAgrup_;

    public APmethodDecl()
    {
        // Constructor
    }

    public APmethodDecl(
        @SuppressWarnings("hiding") TTfunc _tfunc_,
        @SuppressWarnings("hiding") PPreceiver _preceiver_,
        @SuppressWarnings("hiding") PPmethodName _pmethodName_,
        @SuppressWarnings("hiding") PPmethodDeclAgrup _pmethodDeclAgrup_)
    {
        // Constructor
        setTfunc(_tfunc_);

        setPreceiver(_preceiver_);

        setPmethodName(_pmethodName_);

        setPmethodDeclAgrup(_pmethodDeclAgrup_);

    }

    @Override
    public Object clone()
    {
        return new APmethodDecl(
            cloneNode(this._tfunc_),
            cloneNode(this._preceiver_),
            cloneNode(this._pmethodName_),
            cloneNode(this._pmethodDeclAgrup_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAPmethodDecl(this);
    }

    public TTfunc getTfunc()
    {
        return this._tfunc_;
    }

    public void setTfunc(TTfunc node)
    {
        if(this._tfunc_ != null)
        {
            this._tfunc_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._tfunc_ = node;
    }

    public PPreceiver getPreceiver()
    {
        return this._preceiver_;
    }

    public void setPreceiver(PPreceiver node)
    {
        if(this._preceiver_ != null)
        {
            this._preceiver_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._preceiver_ = node;
    }

    public PPmethodName getPmethodName()
    {
        return this._pmethodName_;
    }

    public void setPmethodName(PPmethodName node)
    {
        if(this._pmethodName_ != null)
        {
            this._pmethodName_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._pmethodName_ = node;
    }

    public PPmethodDeclAgrup getPmethodDeclAgrup()
    {
        return this._pmethodDeclAgrup_;
    }

    public void setPmethodDeclAgrup(PPmethodDeclAgrup node)
    {
        if(this._pmethodDeclAgrup_ != null)
        {
            this._pmethodDeclAgrup_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._pmethodDeclAgrup_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._tfunc_)
            + toString(this._preceiver_)
            + toString(this._pmethodName_)
            + toString(this._pmethodDeclAgrup_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._tfunc_ == child)
        {
            this._tfunc_ = null;
            return;
        }

        if(this._preceiver_ == child)
        {
            this._preceiver_ = null;
            return;
        }

        if(this._pmethodName_ == child)
        {
            this._pmethodName_ = null;
            return;
        }

        if(this._pmethodDeclAgrup_ == child)
        {
            this._pmethodDeclAgrup_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._tfunc_ == oldChild)
        {
            setTfunc((TTfunc) newChild);
            return;
        }

        if(this._preceiver_ == oldChild)
        {
            setPreceiver((PPreceiver) newChild);
            return;
        }

        if(this._pmethodName_ == oldChild)
        {
            setPmethodName((PPmethodName) newChild);
            return;
        }

        if(this._pmethodDeclAgrup_ == oldChild)
        {
            setPmethodDeclAgrup((PPmethodDeclAgrup) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
