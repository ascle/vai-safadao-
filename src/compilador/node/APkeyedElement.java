/* This file was generated by SableCC (http://www.sablecc.org/). */

package compilador.node;

import compilador.analysis.*;

@SuppressWarnings("nls")
public final class APkeyedElement extends PPkeyedElement
{
    private PPkeyedElementOpc _pkeyedElementOpc_;
    private PPelement _pelement_;

    public APkeyedElement()
    {
        // Constructor
    }

    public APkeyedElement(
        @SuppressWarnings("hiding") PPkeyedElementOpc _pkeyedElementOpc_,
        @SuppressWarnings("hiding") PPelement _pelement_)
    {
        // Constructor
        setPkeyedElementOpc(_pkeyedElementOpc_);

        setPelement(_pelement_);

    }

    @Override
    public Object clone()
    {
        return new APkeyedElement(
            cloneNode(this._pkeyedElementOpc_),
            cloneNode(this._pelement_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAPkeyedElement(this);
    }

    public PPkeyedElementOpc getPkeyedElementOpc()
    {
        return this._pkeyedElementOpc_;
    }

    public void setPkeyedElementOpc(PPkeyedElementOpc node)
    {
        if(this._pkeyedElementOpc_ != null)
        {
            this._pkeyedElementOpc_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._pkeyedElementOpc_ = node;
    }

    public PPelement getPelement()
    {
        return this._pelement_;
    }

    public void setPelement(PPelement node)
    {
        if(this._pelement_ != null)
        {
            this._pelement_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._pelement_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._pkeyedElementOpc_)
            + toString(this._pelement_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._pkeyedElementOpc_ == child)
        {
            this._pkeyedElementOpc_ = null;
            return;
        }

        if(this._pelement_ == child)
        {
            this._pelement_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._pkeyedElementOpc_ == oldChild)
        {
            setPkeyedElementOpc((PPkeyedElementOpc) newChild);
            return;
        }

        if(this._pelement_ == oldChild)
        {
            setPelement((PPelement) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
