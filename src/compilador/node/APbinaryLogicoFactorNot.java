/* This file was generated by SableCC (http://www.sablecc.org/). */

package compilador.node;

import compilador.analysis.*;

@SuppressWarnings("nls")
public final class APbinaryLogicoFactorNot extends PPbinaryLogicoFactorNot
{
    private TTnotLogico _tnotLogico_;
    private PPbinaryExpr _pbinaryExpr_;

    public APbinaryLogicoFactorNot()
    {
        // Constructor
    }

    public APbinaryLogicoFactorNot(
        @SuppressWarnings("hiding") TTnotLogico _tnotLogico_,
        @SuppressWarnings("hiding") PPbinaryExpr _pbinaryExpr_)
    {
        // Constructor
        setTnotLogico(_tnotLogico_);

        setPbinaryExpr(_pbinaryExpr_);

    }

    @Override
    public Object clone()
    {
        return new APbinaryLogicoFactorNot(
            cloneNode(this._tnotLogico_),
            cloneNode(this._pbinaryExpr_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAPbinaryLogicoFactorNot(this);
    }

    public TTnotLogico getTnotLogico()
    {
        return this._tnotLogico_;
    }

    public void setTnotLogico(TTnotLogico node)
    {
        if(this._tnotLogico_ != null)
        {
            this._tnotLogico_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._tnotLogico_ = node;
    }

    public PPbinaryExpr getPbinaryExpr()
    {
        return this._pbinaryExpr_;
    }

    public void setPbinaryExpr(PPbinaryExpr node)
    {
        if(this._pbinaryExpr_ != null)
        {
            this._pbinaryExpr_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._pbinaryExpr_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._tnotLogico_)
            + toString(this._pbinaryExpr_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._tnotLogico_ == child)
        {
            this._tnotLogico_ = null;
            return;
        }

        if(this._pbinaryExpr_ == child)
        {
            this._pbinaryExpr_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._tnotLogico_ == oldChild)
        {
            setTnotLogico((TTnotLogico) newChild);
            return;
        }

        if(this._pbinaryExpr_ == oldChild)
        {
            setPbinaryExpr((PPbinaryExpr) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
