/* This file was generated by SableCC (http://www.sablecc.org/). */

package compilador.node;

import compilador.analysis.*;

@SuppressWarnings("nls")
public final class AIndicePprimaryExpr extends PPprimaryExpr
{
    private PPprimaryExpr _pprimaryExpr_;
    private PPindex _pindex_;

    public AIndicePprimaryExpr()
    {
        // Constructor
    }

    public AIndicePprimaryExpr(
        @SuppressWarnings("hiding") PPprimaryExpr _pprimaryExpr_,
        @SuppressWarnings("hiding") PPindex _pindex_)
    {
        // Constructor
        setPprimaryExpr(_pprimaryExpr_);

        setPindex(_pindex_);

    }

    @Override
    public Object clone()
    {
        return new AIndicePprimaryExpr(
            cloneNode(this._pprimaryExpr_),
            cloneNode(this._pindex_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAIndicePprimaryExpr(this);
    }

    public PPprimaryExpr getPprimaryExpr()
    {
        return this._pprimaryExpr_;
    }

    public void setPprimaryExpr(PPprimaryExpr node)
    {
        if(this._pprimaryExpr_ != null)
        {
            this._pprimaryExpr_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._pprimaryExpr_ = node;
    }

    public PPindex getPindex()
    {
        return this._pindex_;
    }

    public void setPindex(PPindex node)
    {
        if(this._pindex_ != null)
        {
            this._pindex_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._pindex_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._pprimaryExpr_)
            + toString(this._pindex_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._pprimaryExpr_ == child)
        {
            this._pprimaryExpr_ = null;
            return;
        }

        if(this._pindex_ == child)
        {
            this._pindex_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._pprimaryExpr_ == oldChild)
        {
            setPprimaryExpr((PPprimaryExpr) newChild);
            return;
        }

        if(this._pindex_ == oldChild)
        {
            setPindex((PPindex) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
