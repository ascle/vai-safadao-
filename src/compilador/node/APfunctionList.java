/* This file was generated by SableCC (http://www.sablecc.org/). */

package compilador.node;

import compilador.analysis.*;

@SuppressWarnings("nls")
public final class APfunctionList extends PPfunctionList
{
    private TTfunc _tfunc_;
    private PPfunction _pfunction_;

    public APfunctionList()
    {
        // Constructor
    }

    public APfunctionList(
        @SuppressWarnings("hiding") TTfunc _tfunc_,
        @SuppressWarnings("hiding") PPfunction _pfunction_)
    {
        // Constructor
        setTfunc(_tfunc_);

        setPfunction(_pfunction_);

    }

    @Override
    public Object clone()
    {
        return new APfunctionList(
            cloneNode(this._tfunc_),
            cloneNode(this._pfunction_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAPfunctionList(this);
    }

    public TTfunc getTfunc()
    {
        return this._tfunc_;
    }

    public void setTfunc(TTfunc node)
    {
        if(this._tfunc_ != null)
        {
            this._tfunc_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._tfunc_ = node;
    }

    public PPfunction getPfunction()
    {
        return this._pfunction_;
    }

    public void setPfunction(PPfunction node)
    {
        if(this._pfunction_ != null)
        {
            this._pfunction_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._pfunction_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._tfunc_)
            + toString(this._pfunction_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._tfunc_ == child)
        {
            this._tfunc_ = null;
            return;
        }

        if(this._pfunction_ == child)
        {
            this._pfunction_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._tfunc_ == oldChild)
        {
            setTfunc((TTfunc) newChild);
            return;
        }

        if(this._pfunction_ == oldChild)
        {
            setPfunction((PPfunction) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
