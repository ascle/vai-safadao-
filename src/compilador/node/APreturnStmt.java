/* This file was generated by SableCC (http://www.sablecc.org/). */

package compilador.node;

import compilador.analysis.*;

@SuppressWarnings("nls")
public final class APreturnStmt extends PPreturnStmt
{
    private TTreturn _treturn_;
    private PPexpressionList _pexpressionList_;

    public APreturnStmt()
    {
        // Constructor
    }

    public APreturnStmt(
        @SuppressWarnings("hiding") TTreturn _treturn_,
        @SuppressWarnings("hiding") PPexpressionList _pexpressionList_)
    {
        // Constructor
        setTreturn(_treturn_);

        setPexpressionList(_pexpressionList_);

    }

    @Override
    public Object clone()
    {
        return new APreturnStmt(
            cloneNode(this._treturn_),
            cloneNode(this._pexpressionList_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAPreturnStmt(this);
    }

    public TTreturn getTreturn()
    {
        return this._treturn_;
    }

    public void setTreturn(TTreturn node)
    {
        if(this._treturn_ != null)
        {
            this._treturn_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._treturn_ = node;
    }

    public PPexpressionList getPexpressionList()
    {
        return this._pexpressionList_;
    }

    public void setPexpressionList(PPexpressionList node)
    {
        if(this._pexpressionList_ != null)
        {
            this._pexpressionList_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._pexpressionList_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._treturn_)
            + toString(this._pexpressionList_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._treturn_ == child)
        {
            this._treturn_ = null;
            return;
        }

        if(this._pexpressionList_ == child)
        {
            this._pexpressionList_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._treturn_ == oldChild)
        {
            setTreturn((TTreturn) newChild);
            return;
        }

        if(this._pexpressionList_ == oldChild)
        {
            setPexpressionList((PPexpressionList) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
