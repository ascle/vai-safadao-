/* This file was generated by SableCC (http://www.sablecc.org/). */

package compilador.node;

import compilador.analysis.*;

@SuppressWarnings("nls")
public final class APsignature extends PPsignature
{
    private PPparameters _pparameters_;
    private PPresult _presult_;

    public APsignature()
    {
        // Constructor
    }

    public APsignature(
        @SuppressWarnings("hiding") PPparameters _pparameters_,
        @SuppressWarnings("hiding") PPresult _presult_)
    {
        // Constructor
        setPparameters(_pparameters_);

        setPresult(_presult_);

    }

    @Override
    public Object clone()
    {
        return new APsignature(
            cloneNode(this._pparameters_),
            cloneNode(this._presult_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAPsignature(this);
    }

    public PPparameters getPparameters()
    {
        return this._pparameters_;
    }

    public void setPparameters(PPparameters node)
    {
        if(this._pparameters_ != null)
        {
            this._pparameters_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._pparameters_ = node;
    }

    public PPresult getPresult()
    {
        return this._presult_;
    }

    public void setPresult(PPresult node)
    {
        if(this._presult_ != null)
        {
            this._presult_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._presult_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._pparameters_)
            + toString(this._presult_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._pparameters_ == child)
        {
            this._pparameters_ = null;
            return;
        }

        if(this._presult_ == child)
        {
            this._presult_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._pparameters_ == oldChild)
        {
            setPparameters((PPparameters) newChild);
            return;
        }

        if(this._presult_ == oldChild)
        {
            setPresult((PPresult) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
