/* This file was generated by SableCC (http://www.sablecc.org/). */

package compilador.node;

import compilador.analysis.*;

@SuppressWarnings("nls")
public final class APrangeClause extends PPrangeClause
{
    private PPrangeClauseOpc _prangeClauseOpc_;
    private TTrange _trange_;
    private PPexpression _pexpression_;

    public APrangeClause()
    {
        // Constructor
    }

    public APrangeClause(
        @SuppressWarnings("hiding") PPrangeClauseOpc _prangeClauseOpc_,
        @SuppressWarnings("hiding") TTrange _trange_,
        @SuppressWarnings("hiding") PPexpression _pexpression_)
    {
        // Constructor
        setPrangeClauseOpc(_prangeClauseOpc_);

        setTrange(_trange_);

        setPexpression(_pexpression_);

    }

    @Override
    public Object clone()
    {
        return new APrangeClause(
            cloneNode(this._prangeClauseOpc_),
            cloneNode(this._trange_),
            cloneNode(this._pexpression_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAPrangeClause(this);
    }

    public PPrangeClauseOpc getPrangeClauseOpc()
    {
        return this._prangeClauseOpc_;
    }

    public void setPrangeClauseOpc(PPrangeClauseOpc node)
    {
        if(this._prangeClauseOpc_ != null)
        {
            this._prangeClauseOpc_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._prangeClauseOpc_ = node;
    }

    public TTrange getTrange()
    {
        return this._trange_;
    }

    public void setTrange(TTrange node)
    {
        if(this._trange_ != null)
        {
            this._trange_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._trange_ = node;
    }

    public PPexpression getPexpression()
    {
        return this._pexpression_;
    }

    public void setPexpression(PPexpression node)
    {
        if(this._pexpression_ != null)
        {
            this._pexpression_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._pexpression_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._prangeClauseOpc_)
            + toString(this._trange_)
            + toString(this._pexpression_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._prangeClauseOpc_ == child)
        {
            this._prangeClauseOpc_ = null;
            return;
        }

        if(this._trange_ == child)
        {
            this._trange_ = null;
            return;
        }

        if(this._pexpression_ == child)
        {
            this._pexpression_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._prangeClauseOpc_ == oldChild)
        {
            setPrangeClauseOpc((PPrangeClauseOpc) newChild);
            return;
        }

        if(this._trange_ == oldChild)
        {
            setTrange((TTrange) newChild);
            return;
        }

        if(this._pexpression_ == oldChild)
        {
            setPexpression((PPexpression) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
