/* This file was generated by SableCC (http://www.sablecc.org/). */

package compilador.node;

import compilador.analysis.*;

@SuppressWarnings("nls")
public final class APbinaryAritExp extends PPbinaryAritExp
{
    private PPbinaryAritExp _pbinaryAritExp_;
    private PPaddOp _paddOp_;
    private PPbinaryAritFactor _pbinaryAritFactor_;

    public APbinaryAritExp()
    {
        // Constructor
    }

    public APbinaryAritExp(
        @SuppressWarnings("hiding") PPbinaryAritExp _pbinaryAritExp_,
        @SuppressWarnings("hiding") PPaddOp _paddOp_,
        @SuppressWarnings("hiding") PPbinaryAritFactor _pbinaryAritFactor_)
    {
        // Constructor
        setPbinaryAritExp(_pbinaryAritExp_);

        setPaddOp(_paddOp_);

        setPbinaryAritFactor(_pbinaryAritFactor_);

    }

    @Override
    public Object clone()
    {
        return new APbinaryAritExp(
            cloneNode(this._pbinaryAritExp_),
            cloneNode(this._paddOp_),
            cloneNode(this._pbinaryAritFactor_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAPbinaryAritExp(this);
    }

    public PPbinaryAritExp getPbinaryAritExp()
    {
        return this._pbinaryAritExp_;
    }

    public void setPbinaryAritExp(PPbinaryAritExp node)
    {
        if(this._pbinaryAritExp_ != null)
        {
            this._pbinaryAritExp_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._pbinaryAritExp_ = node;
    }

    public PPaddOp getPaddOp()
    {
        return this._paddOp_;
    }

    public void setPaddOp(PPaddOp node)
    {
        if(this._paddOp_ != null)
        {
            this._paddOp_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._paddOp_ = node;
    }

    public PPbinaryAritFactor getPbinaryAritFactor()
    {
        return this._pbinaryAritFactor_;
    }

    public void setPbinaryAritFactor(PPbinaryAritFactor node)
    {
        if(this._pbinaryAritFactor_ != null)
        {
            this._pbinaryAritFactor_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._pbinaryAritFactor_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._pbinaryAritExp_)
            + toString(this._paddOp_)
            + toString(this._pbinaryAritFactor_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._pbinaryAritExp_ == child)
        {
            this._pbinaryAritExp_ = null;
            return;
        }

        if(this._paddOp_ == child)
        {
            this._paddOp_ = null;
            return;
        }

        if(this._pbinaryAritFactor_ == child)
        {
            this._pbinaryAritFactor_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._pbinaryAritExp_ == oldChild)
        {
            setPbinaryAritExp((PPbinaryAritExp) newChild);
            return;
        }

        if(this._paddOp_ == oldChild)
        {
            setPaddOp((PPaddOp) newChild);
            return;
        }

        if(this._pbinaryAritFactor_ == oldChild)
        {
            setPbinaryAritFactor((PPbinaryAritFactor) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
