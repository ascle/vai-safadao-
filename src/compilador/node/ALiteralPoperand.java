/* This file was generated by SableCC (http://www.sablecc.org/). */

package compilador.node;

import compilador.analysis.*;

@SuppressWarnings("nls")
public final class ALiteralPoperand extends PPoperand
{
    private PPliteral _pliteral_;

    public ALiteralPoperand()
    {
        // Constructor
    }

    public ALiteralPoperand(
        @SuppressWarnings("hiding") PPliteral _pliteral_)
    {
        // Constructor
        setPliteral(_pliteral_);

    }

    @Override
    public Object clone()
    {
        return new ALiteralPoperand(
            cloneNode(this._pliteral_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseALiteralPoperand(this);
    }

    public PPliteral getPliteral()
    {
        return this._pliteral_;
    }

    public void setPliteral(PPliteral node)
    {
        if(this._pliteral_ != null)
        {
            this._pliteral_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._pliteral_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._pliteral_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._pliteral_ == child)
        {
            this._pliteral_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._pliteral_ == oldChild)
        {
            setPliteral((PPliteral) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
