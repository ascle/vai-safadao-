/* This file was generated by SableCC (http://www.sablecc.org/). */

package compilador.analysis;

import java.util.*;
import compilador.node.*;

public class ReversedDepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getEOF().apply(this);
        node.getPPprogram().apply(this);
        outStart(node);
    }

    public void inAPprogramLoopPprogram(APprogramLoopPprogram node)
    {
        defaultIn(node);
    }

    public void outAPprogramLoopPprogram(APprogramLoopPprogram node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPprogramLoopPprogram(APprogramLoopPprogram node)
    {
        inAPprogramLoopPprogram(node);
        outAPprogramLoopPprogram(node);
    }

    public void inAPprogramLoop(APprogramLoop node)
    {
        defaultIn(node);
    }

    public void outAPprogramLoop(APprogramLoop node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPprogramLoop(APprogramLoop node)
    {
        inAPprogramLoop(node);
        if(node.getTdelimitador() != null)
        {
            node.getTdelimitador().apply(this);
        }
        if(node.getPtopLevelDecl() != null)
        {
            node.getPtopLevelDecl().apply(this);
        }
        outAPprogramLoop(node);
    }

    public void inAPdeclarationPtopLevelDecl(APdeclarationPtopLevelDecl node)
    {
        defaultIn(node);
    }

    public void outAPdeclarationPtopLevelDecl(APdeclarationPtopLevelDecl node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPdeclarationPtopLevelDecl(APdeclarationPtopLevelDecl node)
    {
        inAPdeclarationPtopLevelDecl(node);
        if(node.getPdeclaration() != null)
        {
            node.getPdeclaration().apply(this);
        }
        outAPdeclarationPtopLevelDecl(node);
    }

    public void inAPfunctionDeclPtopLevelDecl(APfunctionDeclPtopLevelDecl node)
    {
        defaultIn(node);
    }

    public void outAPfunctionDeclPtopLevelDecl(APfunctionDeclPtopLevelDecl node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPfunctionDeclPtopLevelDecl(APfunctionDeclPtopLevelDecl node)
    {
        inAPfunctionDeclPtopLevelDecl(node);
        if(node.getPfunctionDecl() != null)
        {
            node.getPfunctionDecl().apply(this);
        }
        outAPfunctionDeclPtopLevelDecl(node);
    }

    public void inAPmethodDeclPtopLevelDecl(APmethodDeclPtopLevelDecl node)
    {
        defaultIn(node);
    }

    public void outAPmethodDeclPtopLevelDecl(APmethodDeclPtopLevelDecl node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPmethodDeclPtopLevelDecl(APmethodDeclPtopLevelDecl node)
    {
        inAPmethodDeclPtopLevelDecl(node);
        if(node.getPmethodDecl() != null)
        {
            node.getPmethodDecl().apply(this);
        }
        outAPmethodDeclPtopLevelDecl(node);
    }

    public void inAPconstDeclPdeclaration(APconstDeclPdeclaration node)
    {
        defaultIn(node);
    }

    public void outAPconstDeclPdeclaration(APconstDeclPdeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPconstDeclPdeclaration(APconstDeclPdeclaration node)
    {
        inAPconstDeclPdeclaration(node);
        if(node.getPconstDecl() != null)
        {
            node.getPconstDecl().apply(this);
        }
        outAPconstDeclPdeclaration(node);
    }

    public void inAPvarDeclPdeclaration(APvarDeclPdeclaration node)
    {
        defaultIn(node);
    }

    public void outAPvarDeclPdeclaration(APvarDeclPdeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPvarDeclPdeclaration(APvarDeclPdeclaration node)
    {
        inAPvarDeclPdeclaration(node);
        if(node.getPvarDecl() != null)
        {
            node.getPvarDecl().apply(this);
        }
        outAPvarDeclPdeclaration(node);
    }

    public void inAPfunctionDecl(APfunctionDecl node)
    {
        defaultIn(node);
    }

    public void outAPfunctionDecl(APfunctionDecl node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPfunctionDecl(APfunctionDecl node)
    {
        inAPfunctionDecl(node);
        if(node.getPfunctionDeclAgrup() != null)
        {
            node.getPfunctionDeclAgrup().apply(this);
        }
        if(node.getPfunctionName() != null)
        {
            node.getPfunctionName().apply(this);
        }
        if(node.getTfunc() != null)
        {
            node.getTfunc().apply(this);
        }
        outAPfunctionDecl(node);
    }

    public void inAPfunctionPfunctionDeclAgrup(APfunctionPfunctionDeclAgrup node)
    {
        defaultIn(node);
    }

    public void outAPfunctionPfunctionDeclAgrup(APfunctionPfunctionDeclAgrup node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPfunctionPfunctionDeclAgrup(APfunctionPfunctionDeclAgrup node)
    {
        inAPfunctionPfunctionDeclAgrup(node);
        if(node.getPfunction() != null)
        {
            node.getPfunction().apply(this);
        }
        outAPfunctionPfunctionDeclAgrup(node);
    }

    public void inAPsignaturePfunctionDeclAgrup(APsignaturePfunctionDeclAgrup node)
    {
        defaultIn(node);
    }

    public void outAPsignaturePfunctionDeclAgrup(APsignaturePfunctionDeclAgrup node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPsignaturePfunctionDeclAgrup(APsignaturePfunctionDeclAgrup node)
    {
        inAPsignaturePfunctionDeclAgrup(node);
        if(node.getPsignature() != null)
        {
            node.getPsignature().apply(this);
        }
        outAPsignaturePfunctionDeclAgrup(node);
    }

    public void inAPfunctionName(APfunctionName node)
    {
        defaultIn(node);
    }

    public void outAPfunctionName(APfunctionName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPfunctionName(APfunctionName node)
    {
        inAPfunctionName(node);
        if(node.getTidentifier() != null)
        {
            node.getTidentifier().apply(this);
        }
        outAPfunctionName(node);
    }

    public void inAPfunction(APfunction node)
    {
        defaultIn(node);
    }

    public void outAPfunction(APfunction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPfunction(APfunction node)
    {
        inAPfunction(node);
        if(node.getPfunctionBody() != null)
        {
            node.getPfunctionBody().apply(this);
        }
        if(node.getPsignature() != null)
        {
            node.getPsignature().apply(this);
        }
        outAPfunction(node);
    }

    public void inAPfunctionBody(APfunctionBody node)
    {
        defaultIn(node);
    }

    public void outAPfunctionBody(APfunctionBody node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPfunctionBody(APfunctionBody node)
    {
        inAPfunctionBody(node);
        if(node.getPblock() != null)
        {
            node.getPblock().apply(this);
        }
        outAPfunctionBody(node);
    }

    public void inAPmethodDecl(APmethodDecl node)
    {
        defaultIn(node);
    }

    public void outAPmethodDecl(APmethodDecl node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPmethodDecl(APmethodDecl node)
    {
        inAPmethodDecl(node);
        if(node.getPmethodDeclAgrup() != null)
        {
            node.getPmethodDeclAgrup().apply(this);
        }
        if(node.getPmethodName() != null)
        {
            node.getPmethodName().apply(this);
        }
        if(node.getPreceiver() != null)
        {
            node.getPreceiver().apply(this);
        }
        if(node.getTfunc() != null)
        {
            node.getTfunc().apply(this);
        }
        outAPmethodDecl(node);
    }

    public void inAPfunctionPmethodDeclAgrup(APfunctionPmethodDeclAgrup node)
    {
        defaultIn(node);
    }

    public void outAPfunctionPmethodDeclAgrup(APfunctionPmethodDeclAgrup node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPfunctionPmethodDeclAgrup(APfunctionPmethodDeclAgrup node)
    {
        inAPfunctionPmethodDeclAgrup(node);
        if(node.getPfunction() != null)
        {
            node.getPfunction().apply(this);
        }
        outAPfunctionPmethodDeclAgrup(node);
    }

    public void inAPsignaturePmethodDeclAgrup(APsignaturePmethodDeclAgrup node)
    {
        defaultIn(node);
    }

    public void outAPsignaturePmethodDeclAgrup(APsignaturePmethodDeclAgrup node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPsignaturePmethodDeclAgrup(APsignaturePmethodDeclAgrup node)
    {
        inAPsignaturePmethodDeclAgrup(node);
        if(node.getPsignature() != null)
        {
            node.getPsignature().apply(this);
        }
        outAPsignaturePmethodDeclAgrup(node);
    }

    public void inAPreceiver(APreceiver node)
    {
        defaultIn(node);
    }

    public void outAPreceiver(APreceiver node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPreceiver(APreceiver node)
    {
        inAPreceiver(node);
        if(node.getPparameters() != null)
        {
            node.getPparameters().apply(this);
        }
        outAPreceiver(node);
    }

    public void inAPmethodName(APmethodName node)
    {
        defaultIn(node);
    }

    public void outAPmethodName(APmethodName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPmethodName(APmethodName node)
    {
        inAPmethodName(node);
        if(node.getTidentifier() != null)
        {
            node.getTidentifier().apply(this);
        }
        outAPmethodName(node);
    }

    public void inAPparameters(APparameters node)
    {
        defaultIn(node);
    }

    public void outAPparameters(APparameters node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPparameters(APparameters node)
    {
        inAPparameters(node);
        if(node.getTfechaParen() != null)
        {
            node.getTfechaParen().apply(this);
        }
        if(node.getPparametersOp() != null)
        {
            node.getPparametersOp().apply(this);
        }
        if(node.getTabreParen() != null)
        {
            node.getTabreParen().apply(this);
        }
        outAPparameters(node);
    }

    public void inAPparametersOp(APparametersOp node)
    {
        defaultIn(node);
    }

    public void outAPparametersOp(APparametersOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPparametersOp(APparametersOp node)
    {
        inAPparametersOp(node);
        if(node.getTvirgula() != null)
        {
            node.getTvirgula().apply(this);
        }
        if(node.getPparameterList() != null)
        {
            node.getPparameterList().apply(this);
        }
        outAPparametersOp(node);
    }

    public void inAPparameterListLoopPparameterList(APparameterListLoopPparameterList node)
    {
        defaultIn(node);
    }

    public void outAPparameterListLoopPparameterList(APparameterListLoopPparameterList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPparameterListLoopPparameterList(APparameterListLoopPparameterList node)
    {
        inAPparameterListLoopPparameterList(node);
        if(node.getPparameterListLoop() != null)
        {
            node.getPparameterListLoop().apply(this);
        }
        outAPparameterListLoopPparameterList(node);
    }

    public void inAPparameterDeclPparameterList(APparameterDeclPparameterList node)
    {
        defaultIn(node);
    }

    public void outAPparameterDeclPparameterList(APparameterDeclPparameterList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPparameterDeclPparameterList(APparameterDeclPparameterList node)
    {
        inAPparameterDeclPparameterList(node);
        if(node.getPparameterDecl() != null)
        {
            node.getPparameterDecl().apply(this);
        }
        outAPparameterDeclPparameterList(node);
    }

    public void inAPparameterListLoop(APparameterListLoop node)
    {
        defaultIn(node);
    }

    public void outAPparameterListLoop(APparameterListLoop node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPparameterListLoop(APparameterListLoop node)
    {
        inAPparameterListLoop(node);
        if(node.getPparameterDecl() != null)
        {
            node.getPparameterDecl().apply(this);
        }
        if(node.getTvirgula() != null)
        {
            node.getTvirgula().apply(this);
        }
        if(node.getPparameterList() != null)
        {
            node.getPparameterList().apply(this);
        }
        outAPparameterListLoop(node);
    }

    public void inAPparameterDecl(APparameterDecl node)
    {
        defaultIn(node);
    }

    public void outAPparameterDecl(APparameterDecl node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPparameterDecl(APparameterDecl node)
    {
        inAPparameterDecl(node);
        if(node.getPtype() != null)
        {
            node.getPtype().apply(this);
        }
        if(node.getPidentifierList() != null)
        {
            node.getPidentifierList().apply(this);
        }
        outAPparameterDecl(node);
    }

    public void inAPidentifierListPidentifierList(APidentifierListPidentifierList node)
    {
        defaultIn(node);
    }

    public void outAPidentifierListPidentifierList(APidentifierListPidentifierList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPidentifierListPidentifierList(APidentifierListPidentifierList node)
    {
        inAPidentifierListPidentifierList(node);
        if(node.getTvirgula() != null)
        {
            node.getTvirgula().apply(this);
        }
        outAPidentifierListPidentifierList(node);
    }

    public void inAPidentifierList(APidentifierList node)
    {
        defaultIn(node);
    }

    public void outAPidentifierList(APidentifierList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPidentifierList(APidentifierList node)
    {
        inAPidentifierList(node);
        if(node.getTidentifier() != null)
        {
            node.getTidentifier().apply(this);
        }
        outAPidentifierList(node);
    }

    public void inAPconstDecl(APconstDecl node)
    {
        defaultIn(node);
    }

    public void outAPconstDecl(APconstDecl node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPconstDecl(APconstDecl node)
    {
        inAPconstDecl(node);
        if(node.getPconstDecl2() != null)
        {
            node.getPconstDecl2().apply(this);
        }
        if(node.getTconst() != null)
        {
            node.getTconst().apply(this);
        }
        outAPconstDecl(node);
    }

    public void inAPconstSpecIdentPconstDecl2(APconstSpecIdentPconstDecl2 node)
    {
        defaultIn(node);
    }

    public void outAPconstSpecIdentPconstDecl2(APconstSpecIdentPconstDecl2 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPconstSpecIdentPconstDecl2(APconstSpecIdentPconstDecl2 node)
    {
        inAPconstSpecIdentPconstDecl2(node);
        if(node.getPconstSpecIdent() != null)
        {
            node.getPconstSpecIdent().apply(this);
        }
        outAPconstSpecIdentPconstDecl2(node);
    }

    public void inAPconstDecl2(APconstDecl2 node)
    {
        defaultIn(node);
    }

    public void outAPconstDecl2(APconstDecl2 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPconstDecl2(APconstDecl2 node)
    {
        inAPconstDecl2(node);
        if(node.getPconstDecl3() != null)
        {
            node.getPconstDecl3().apply(this);
        }
        if(node.getTabreParen() != null)
        {
            node.getTabreParen().apply(this);
        }
        outAPconstDecl2(node);
    }

    public void inAPconstDeclConteudoPconstDecl3(APconstDeclConteudoPconstDecl3 node)
    {
        defaultIn(node);
    }

    public void outAPconstDeclConteudoPconstDecl3(APconstDeclConteudoPconstDecl3 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPconstDeclConteudoPconstDecl3(APconstDeclConteudoPconstDecl3 node)
    {
        inAPconstDeclConteudoPconstDecl3(node);
        if(node.getTfechaParen() != null)
        {
            node.getTfechaParen().apply(this);
        }
        outAPconstDeclConteudoPconstDecl3(node);
    }

    public void inAPconstDeclConteudo(APconstDeclConteudo node)
    {
        defaultIn(node);
    }

    public void outAPconstDeclConteudo(APconstDeclConteudo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPconstDeclConteudo(APconstDeclConteudo node)
    {
        inAPconstDeclConteudo(node);
        if(node.getTdelimitador() != null)
        {
            node.getTdelimitador().apply(this);
        }
        if(node.getPconstSpecIdent() != null)
        {
            node.getPconstSpecIdent().apply(this);
        }
        outAPconstDeclConteudo(node);
    }

    public void inAPconstSpecIdent(APconstSpecIdent node)
    {
        defaultIn(node);
    }

    public void outAPconstSpecIdent(APconstSpecIdent node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPconstSpecIdent(APconstSpecIdent node)
    {
        inAPconstSpecIdent(node);
        if(node.getPconstSpec() != null)
        {
            node.getPconstSpec().apply(this);
        }
        if(node.getPidentifierList() != null)
        {
            node.getPidentifierList().apply(this);
        }
        outAPconstSpecIdent(node);
    }

    public void inAPconstSpec2PconstSpec(APconstSpec2PconstSpec node)
    {
        defaultIn(node);
    }

    public void outAPconstSpec2PconstSpec(APconstSpec2PconstSpec node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPconstSpec2PconstSpec(APconstSpec2PconstSpec node)
    {
        inAPconstSpec2PconstSpec(node);
        if(node.getPconstSpec2() != null)
        {
            node.getPconstSpec2().apply(this);
        }
        outAPconstSpec2PconstSpec(node);
    }

    public void inAPtypePconstSpec2(APtypePconstSpec2 node)
    {
        defaultIn(node);
    }

    public void outAPtypePconstSpec2(APtypePconstSpec2 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPtypePconstSpec2(APtypePconstSpec2 node)
    {
        inAPtypePconstSpec2(node);
        if(node.getPexpressionList() != null)
        {
            node.getPexpressionList().apply(this);
        }
        if(node.getTigual() != null)
        {
            node.getTigual().apply(this);
        }
        if(node.getPtype() != null)
        {
            node.getPtype().apply(this);
        }
        outAPtypePconstSpec2(node);
    }

    public void inAPexpressionListLoopPexpressionList(APexpressionListLoopPexpressionList node)
    {
        defaultIn(node);
    }

    public void outAPexpressionListLoopPexpressionList(APexpressionListLoopPexpressionList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPexpressionListLoopPexpressionList(APexpressionListLoopPexpressionList node)
    {
        inAPexpressionListLoopPexpressionList(node);
        outAPexpressionListLoopPexpressionList(node);
    }

    public void inAPexpressionList(APexpressionList node)
    {
        defaultIn(node);
    }

    public void outAPexpressionList(APexpressionList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPexpressionList(APexpressionList node)
    {
        inAPexpressionList(node);
        if(node.getPexpression() != null)
        {
            node.getPexpression().apply(this);
        }
        outAPexpressionList(node);
    }

    public void inAPexpressionListLoop(APexpressionListLoop node)
    {
        defaultIn(node);
    }

    public void outAPexpressionListLoop(APexpressionListLoop node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPexpressionListLoop(APexpressionListLoop node)
    {
        inAPexpressionListLoop(node);
        if(node.getPexpression() != null)
        {
            node.getPexpression().apply(this);
        }
        if(node.getTvirgula() != null)
        {
            node.getTvirgula().apply(this);
        }
        outAPexpressionListLoop(node);
    }

    public void inAPunaryExprPexpression(APunaryExprPexpression node)
    {
        defaultIn(node);
    }

    public void outAPunaryExprPexpression(APunaryExprPexpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPunaryExprPexpression(APunaryExprPexpression node)
    {
        inAPunaryExprPexpression(node);
        if(node.getPunaryExpr() != null)
        {
            node.getPunaryExpr().apply(this);
        }
        outAPunaryExprPexpression(node);
    }

    public void inAPexpression(APexpression node)
    {
        defaultIn(node);
    }

    public void outAPexpression(APexpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPexpression(APexpression node)
    {
        inAPexpression(node);
        if(node.getPbinaryExpr() != null)
        {
            node.getPbinaryExpr().apply(this);
        }
        outAPexpression(node);
    }

    public void inAPbinaryLogicoExpPbinaryExpr(APbinaryLogicoExpPbinaryExpr node)
    {
        defaultIn(node);
    }

    public void outAPbinaryLogicoExpPbinaryExpr(APbinaryLogicoExpPbinaryExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPbinaryLogicoExpPbinaryExpr(APbinaryLogicoExpPbinaryExpr node)
    {
        inAPbinaryLogicoExpPbinaryExpr(node);
        if(node.getPbinaryLogicoExp() != null)
        {
            node.getPbinaryLogicoExp().apply(this);
        }
        outAPbinaryLogicoExpPbinaryExpr(node);
    }

    public void inAPbinaryRelExpPbinaryExpr(APbinaryRelExpPbinaryExpr node)
    {
        defaultIn(node);
    }

    public void outAPbinaryRelExpPbinaryExpr(APbinaryRelExpPbinaryExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPbinaryRelExpPbinaryExpr(APbinaryRelExpPbinaryExpr node)
    {
        inAPbinaryRelExpPbinaryExpr(node);
        if(node.getPbinaryRelExp() != null)
        {
            node.getPbinaryRelExp().apply(this);
        }
        outAPbinaryRelExpPbinaryExpr(node);
    }

    public void inAPbinaryAritExpPbinaryExpr(APbinaryAritExpPbinaryExpr node)
    {
        defaultIn(node);
    }

    public void outAPbinaryAritExpPbinaryExpr(APbinaryAritExpPbinaryExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPbinaryAritExpPbinaryExpr(APbinaryAritExpPbinaryExpr node)
    {
        inAPbinaryAritExpPbinaryExpr(node);
        if(node.getPbinaryAritExp() != null)
        {
            node.getPbinaryAritExp().apply(this);
        }
        outAPbinaryAritExpPbinaryExpr(node);
    }

    public void inAPprimaryExprPunaryExpr(APprimaryExprPunaryExpr node)
    {
        defaultIn(node);
    }

    public void outAPprimaryExprPunaryExpr(APprimaryExprPunaryExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPprimaryExprPunaryExpr(APprimaryExprPunaryExpr node)
    {
        inAPprimaryExprPunaryExpr(node);
        if(node.getPprimaryExpr() != null)
        {
            node.getPprimaryExpr().apply(this);
        }
        outAPprimaryExprPunaryExpr(node);
    }

    public void inAPunaryExpr(APunaryExpr node)
    {
        defaultIn(node);
    }

    public void outAPunaryExpr(APunaryExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPunaryExpr(APunaryExpr node)
    {
        inAPunaryExpr(node);
        if(node.getPunaryExpr() != null)
        {
            node.getPunaryExpr().apply(this);
        }
        if(node.getPunaryOp() != null)
        {
            node.getPunaryOp().apply(this);
        }
        outAPunaryExpr(node);
    }

    public void inATadicaoPunaryOp(ATadicaoPunaryOp node)
    {
        defaultIn(node);
    }

    public void outATadicaoPunaryOp(ATadicaoPunaryOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATadicaoPunaryOp(ATadicaoPunaryOp node)
    {
        inATadicaoPunaryOp(node);
        if(node.getTadicao() != null)
        {
            node.getTadicao().apply(this);
        }
        outATadicaoPunaryOp(node);
    }

    public void inATsubtracaoPunaryOp(ATsubtracaoPunaryOp node)
    {
        defaultIn(node);
    }

    public void outATsubtracaoPunaryOp(ATsubtracaoPunaryOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATsubtracaoPunaryOp(ATsubtracaoPunaryOp node)
    {
        inATsubtracaoPunaryOp(node);
        if(node.getTsubtracao() != null)
        {
            node.getTsubtracao().apply(this);
        }
        outATsubtracaoPunaryOp(node);
    }

    public void inATnotLogicoPunaryOp(ATnotLogicoPunaryOp node)
    {
        defaultIn(node);
    }

    public void outATnotLogicoPunaryOp(ATnotLogicoPunaryOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATnotLogicoPunaryOp(ATnotLogicoPunaryOp node)
    {
        inATnotLogicoPunaryOp(node);
        if(node.getTnotLogico() != null)
        {
            node.getTnotLogico().apply(this);
        }
        outATnotLogicoPunaryOp(node);
    }

    public void inAPbinaryLogicoExp(APbinaryLogicoExp node)
    {
        defaultIn(node);
    }

    public void outAPbinaryLogicoExp(APbinaryLogicoExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPbinaryLogicoExp(APbinaryLogicoExp node)
    {
        inAPbinaryLogicoExp(node);
        if(node.getPbinaryLogicoFactor() != null)
        {
            node.getPbinaryLogicoFactor().apply(this);
        }
        if(node.getTorLogico() != null)
        {
            node.getTorLogico().apply(this);
        }
        if(node.getPbinaryLogicoExp() != null)
        {
            node.getPbinaryLogicoExp().apply(this);
        }
        outAPbinaryLogicoExp(node);
    }

    public void inAPbinaryLogicoFactor(APbinaryLogicoFactor node)
    {
        defaultIn(node);
    }

    public void outAPbinaryLogicoFactor(APbinaryLogicoFactor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPbinaryLogicoFactor(APbinaryLogicoFactor node)
    {
        inAPbinaryLogicoFactor(node);
        if(node.getPbinaryLogicoTermo() != null)
        {
            node.getPbinaryLogicoTermo().apply(this);
        }
        if(node.getTandLogico() != null)
        {
            node.getTandLogico().apply(this);
        }
        if(node.getPbinaryLogicoFactor() != null)
        {
            node.getPbinaryLogicoFactor().apply(this);
        }
        outAPbinaryLogicoFactor(node);
    }

    public void inAPbinaryLogicoTermo(APbinaryLogicoTermo node)
    {
        defaultIn(node);
    }

    public void outAPbinaryLogicoTermo(APbinaryLogicoTermo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPbinaryLogicoTermo(APbinaryLogicoTermo node)
    {
        inAPbinaryLogicoTermo(node);
        if(node.getTfechaParen() != null)
        {
            node.getTfechaParen().apply(this);
        }
        if(node.getPbinaryLogicoExp() != null)
        {
            node.getPbinaryLogicoExp().apply(this);
        }
        if(node.getTabreParen() != null)
        {
            node.getTabreParen().apply(this);
        }
        outAPbinaryLogicoTermo(node);
    }

    public void inATidentifierPbinaryLogicoTermo(ATidentifierPbinaryLogicoTermo node)
    {
        defaultIn(node);
    }

    public void outATidentifierPbinaryLogicoTermo(ATidentifierPbinaryLogicoTermo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATidentifierPbinaryLogicoTermo(ATidentifierPbinaryLogicoTermo node)
    {
        inATidentifierPbinaryLogicoTermo(node);
        if(node.getTidentifier() != null)
        {
            node.getTidentifier().apply(this);
        }
        outATidentifierPbinaryLogicoTermo(node);
    }

    public void inAPbinaryRelExp(APbinaryRelExp node)
    {
        defaultIn(node);
    }

    public void outAPbinaryRelExp(APbinaryRelExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPbinaryRelExp(APbinaryRelExp node)
    {
        inAPbinaryRelExp(node);
        if(node.getPbinaryRelTermo() != null)
        {
            node.getPbinaryRelTermo().apply(this);
        }
        if(node.getPrelOp() != null)
        {
            node.getPrelOp().apply(this);
        }
        if(node.getPbinaryRelExp() != null)
        {
            node.getPbinaryRelExp().apply(this);
        }
        outAPbinaryRelExp(node);
    }

    public void inAPbinaryRelTermo(APbinaryRelTermo node)
    {
        defaultIn(node);
    }

    public void outAPbinaryRelTermo(APbinaryRelTermo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPbinaryRelTermo(APbinaryRelTermo node)
    {
        inAPbinaryRelTermo(node);
        if(node.getTfechaParen() != null)
        {
            node.getTfechaParen().apply(this);
        }
        if(node.getPbinaryRelExp() != null)
        {
            node.getPbinaryRelExp().apply(this);
        }
        if(node.getTabreParen() != null)
        {
            node.getTabreParen().apply(this);
        }
        outAPbinaryRelTermo(node);
    }

    public void inATidentifierPbinaryRelTermo(ATidentifierPbinaryRelTermo node)
    {
        defaultIn(node);
    }

    public void outATidentifierPbinaryRelTermo(ATidentifierPbinaryRelTermo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATidentifierPbinaryRelTermo(ATidentifierPbinaryRelTermo node)
    {
        inATidentifierPbinaryRelTermo(node);
        if(node.getTidentifier() != null)
        {
            node.getTidentifier().apply(this);
        }
        outATidentifierPbinaryRelTermo(node);
    }

    public void inATigualIgualPrelOp(ATigualIgualPrelOp node)
    {
        defaultIn(node);
    }

    public void outATigualIgualPrelOp(ATigualIgualPrelOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATigualIgualPrelOp(ATigualIgualPrelOp node)
    {
        inATigualIgualPrelOp(node);
        if(node.getTigualIgual() != null)
        {
            node.getTigualIgual().apply(this);
        }
        outATigualIgualPrelOp(node);
    }

    public void inATmenorPrelOp(ATmenorPrelOp node)
    {
        defaultIn(node);
    }

    public void outATmenorPrelOp(ATmenorPrelOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATmenorPrelOp(ATmenorPrelOp node)
    {
        inATmenorPrelOp(node);
        if(node.getTmenor() != null)
        {
            node.getTmenor().apply(this);
        }
        outATmenorPrelOp(node);
    }

    public void inATmaiorPrelOp(ATmaiorPrelOp node)
    {
        defaultIn(node);
    }

    public void outATmaiorPrelOp(ATmaiorPrelOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATmaiorPrelOp(ATmaiorPrelOp node)
    {
        inATmaiorPrelOp(node);
        if(node.getTmaior() != null)
        {
            node.getTmaior().apply(this);
        }
        outATmaiorPrelOp(node);
    }

    public void inAPbinaryAritExp(APbinaryAritExp node)
    {
        defaultIn(node);
    }

    public void outAPbinaryAritExp(APbinaryAritExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPbinaryAritExp(APbinaryAritExp node)
    {
        inAPbinaryAritExp(node);
        if(node.getPbinaryAritFactor() != null)
        {
            node.getPbinaryAritFactor().apply(this);
        }
        if(node.getPaddOp() != null)
        {
            node.getPaddOp().apply(this);
        }
        if(node.getPbinaryAritExp() != null)
        {
            node.getPbinaryAritExp().apply(this);
        }
        outAPbinaryAritExp(node);
    }

    public void inAPbinaryAritFactor(APbinaryAritFactor node)
    {
        defaultIn(node);
    }

    public void outAPbinaryAritFactor(APbinaryAritFactor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPbinaryAritFactor(APbinaryAritFactor node)
    {
        inAPbinaryAritFactor(node);
        if(node.getPbinaryAritTermo() != null)
        {
            node.getPbinaryAritTermo().apply(this);
        }
        if(node.getPmulOp() != null)
        {
            node.getPmulOp().apply(this);
        }
        if(node.getPbinaryAritFactor() != null)
        {
            node.getPbinaryAritFactor().apply(this);
        }
        outAPbinaryAritFactor(node);
    }

    public void inAPbinaryAritTermo(APbinaryAritTermo node)
    {
        defaultIn(node);
    }

    public void outAPbinaryAritTermo(APbinaryAritTermo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPbinaryAritTermo(APbinaryAritTermo node)
    {
        inAPbinaryAritTermo(node);
        if(node.getTfechaParen() != null)
        {
            node.getTfechaParen().apply(this);
        }
        if(node.getPbinaryAritExp() != null)
        {
            node.getPbinaryAritExp().apply(this);
        }
        if(node.getTabreParen() != null)
        {
            node.getTabreParen().apply(this);
        }
        outAPbinaryAritTermo(node);
    }

    public void inATsubtracaoPbinaryAritTermo(ATsubtracaoPbinaryAritTermo node)
    {
        defaultIn(node);
    }

    public void outATsubtracaoPbinaryAritTermo(ATsubtracaoPbinaryAritTermo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATsubtracaoPbinaryAritTermo(ATsubtracaoPbinaryAritTermo node)
    {
        inATsubtracaoPbinaryAritTermo(node);
        if(node.getTidentifier() != null)
        {
            node.getTidentifier().apply(this);
        }
        outATsubtracaoPbinaryAritTermo(node);
    }

    public void inATadicaoPaddOp(ATadicaoPaddOp node)
    {
        defaultIn(node);
    }

    public void outATadicaoPaddOp(ATadicaoPaddOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATadicaoPaddOp(ATadicaoPaddOp node)
    {
        inATadicaoPaddOp(node);
        if(node.getTadicao() != null)
        {
            node.getTadicao().apply(this);
        }
        outATadicaoPaddOp(node);
    }

    public void inATsubtracaoPaddOp(ATsubtracaoPaddOp node)
    {
        defaultIn(node);
    }

    public void outATsubtracaoPaddOp(ATsubtracaoPaddOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATsubtracaoPaddOp(ATsubtracaoPaddOp node)
    {
        inATsubtracaoPaddOp(node);
        if(node.getTsubtracao() != null)
        {
            node.getTsubtracao().apply(this);
        }
        outATsubtracaoPaddOp(node);
    }

    public void inATestrelaPmulOp(ATestrelaPmulOp node)
    {
        defaultIn(node);
    }

    public void outATestrelaPmulOp(ATestrelaPmulOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATestrelaPmulOp(ATestrelaPmulOp node)
    {
        inATestrelaPmulOp(node);
        if(node.getTestrela() != null)
        {
            node.getTestrela().apply(this);
        }
        outATestrelaPmulOp(node);
    }

    public void inATbarraPmulOp(ATbarraPmulOp node)
    {
        defaultIn(node);
    }

    public void outATbarraPmulOp(ATbarraPmulOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATbarraPmulOp(ATbarraPmulOp node)
    {
        inATbarraPmulOp(node);
        if(node.getTbarra() != null)
        {
            node.getTbarra().apply(this);
        }
        outATbarraPmulOp(node);
    }

    public void inAPtypeNamePtype(APtypeNamePtype node)
    {
        defaultIn(node);
    }

    public void outAPtypeNamePtype(APtypeNamePtype node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPtypeNamePtype(APtypeNamePtype node)
    {
        inAPtypeNamePtype(node);
        if(node.getPtypeName() != null)
        {
            node.getPtypeName().apply(this);
        }
        outAPtypeNamePtype(node);
    }

    public void inAPtypeListPtype(APtypeListPtype node)
    {
        defaultIn(node);
    }

    public void outAPtypeListPtype(APtypeListPtype node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPtypeListPtype(APtypeListPtype node)
    {
        inAPtypeListPtype(node);
        if(node.getPtypeList() != null)
        {
            node.getPtypeList().apply(this);
        }
        outAPtypeListPtype(node);
    }

    public void inAPtype(APtype node)
    {
        defaultIn(node);
    }

    public void outAPtype(APtype node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPtype(APtype node)
    {
        inAPtype(node);
        if(node.getTfechaParen() != null)
        {
            node.getTfechaParen().apply(this);
        }
        if(node.getPtype() != null)
        {
            node.getPtype().apply(this);
        }
        if(node.getTabreParen() != null)
        {
            node.getTabreParen().apply(this);
        }
        outAPtype(node);
    }

    public void inAPtypeName(APtypeName node)
    {
        defaultIn(node);
    }

    public void outAPtypeName(APtypeName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPtypeName(APtypeName node)
    {
        inAPtypeName(node);
        if(node.getTidentifier() != null)
        {
            node.getTidentifier().apply(this);
        }
        outAPtypeName(node);
    }

    public void inATipoArrayPtypeList(ATipoArrayPtypeList node)
    {
        defaultIn(node);
    }

    public void outATipoArrayPtypeList(ATipoArrayPtypeList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATipoArrayPtypeList(ATipoArrayPtypeList node)
    {
        inATipoArrayPtypeList(node);
        if(node.getParrayType() != null)
        {
            node.getParrayType().apply(this);
        }
        outATipoArrayPtypeList(node);
    }

    public void inATipoFuncaoPtypeList(ATipoFuncaoPtypeList node)
    {
        defaultIn(node);
    }

    public void outATipoFuncaoPtypeList(ATipoFuncaoPtypeList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATipoFuncaoPtypeList(ATipoFuncaoPtypeList node)
    {
        inATipoFuncaoPtypeList(node);
        if(node.getPfunctionptype() != null)
        {
            node.getPfunctionptype().apply(this);
        }
        outATipoFuncaoPtypeList(node);
    }

    public void inAParrayType(AParrayType node)
    {
        defaultIn(node);
    }

    public void outAParrayType(AParrayType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParrayType(AParrayType node)
    {
        inAParrayType(node);
        if(node.getPelementType() != null)
        {
            node.getPelementType().apply(this);
        }
        if(node.getTfechaColchete() != null)
        {
            node.getTfechaColchete().apply(this);
        }
        if(node.getParrayLength() != null)
        {
            node.getParrayLength().apply(this);
        }
        if(node.getTabreColchete() != null)
        {
            node.getTabreColchete().apply(this);
        }
        outAParrayType(node);
    }

    public void inAParrayLength(AParrayLength node)
    {
        defaultIn(node);
    }

    public void outAParrayLength(AParrayLength node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParrayLength(AParrayLength node)
    {
        inAParrayLength(node);
        if(node.getPexpression() != null)
        {
            node.getPexpression().apply(this);
        }
        outAParrayLength(node);
    }

    public void inAPelementType(APelementType node)
    {
        defaultIn(node);
    }

    public void outAPelementType(APelementType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPelementType(APelementType node)
    {
        inAPelementType(node);
        if(node.getPtype() != null)
        {
            node.getPtype().apply(this);
        }
        outAPelementType(node);
    }

    public void inAPfunctionptype(APfunctionptype node)
    {
        defaultIn(node);
    }

    public void outAPfunctionptype(APfunctionptype node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPfunctionptype(APfunctionptype node)
    {
        inAPfunctionptype(node);
        if(node.getPsignature() != null)
        {
            node.getPsignature().apply(this);
        }
        if(node.getTfunc() != null)
        {
            node.getTfunc().apply(this);
        }
        outAPfunctionptype(node);
    }

    public void inAPsignature(APsignature node)
    {
        defaultIn(node);
    }

    public void outAPsignature(APsignature node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPsignature(APsignature node)
    {
        inAPsignature(node);
        if(node.getPresult() != null)
        {
            node.getPresult().apply(this);
        }
        if(node.getPparameters() != null)
        {
            node.getPparameters().apply(this);
        }
        outAPsignature(node);
    }

    public void inAParametrosPresult(AParametrosPresult node)
    {
        defaultIn(node);
    }

    public void outAParametrosPresult(AParametrosPresult node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParametrosPresult(AParametrosPresult node)
    {
        inAParametrosPresult(node);
        if(node.getPparameters() != null)
        {
            node.getPparameters().apply(this);
        }
        outAParametrosPresult(node);
    }

    public void inATipoPresult(ATipoPresult node)
    {
        defaultIn(node);
    }

    public void outATipoPresult(ATipoPresult node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATipoPresult(ATipoPresult node)
    {
        inATipoPresult(node);
        if(node.getPtype() != null)
        {
            node.getPtype().apply(this);
        }
        outATipoPresult(node);
    }

    public void inAPparametersOpcional(APparametersOpcional node)
    {
        defaultIn(node);
    }

    public void outAPparametersOpcional(APparametersOpcional node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPparametersOpcional(APparametersOpcional node)
    {
        inAPparametersOpcional(node);
        if(node.getTvirgula() != null)
        {
            node.getTvirgula().apply(this);
        }
        if(node.getPparameterList() != null)
        {
            node.getPparameterList().apply(this);
        }
        outAPparametersOpcional(node);
    }

    public void inADeclaVariavelPvarDecl(ADeclaVariavelPvarDecl node)
    {
        defaultIn(node);
    }

    public void outADeclaVariavelPvarDecl(ADeclaVariavelPvarDecl node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADeclaVariavelPvarDecl(ADeclaVariavelPvarDecl node)
    {
        inADeclaVariavelPvarDecl(node);
        if(node.getPvarDeclAgrup() != null)
        {
            node.getPvarDeclAgrup().apply(this);
        }
        if(node.getTvar() != null)
        {
            node.getTvar().apply(this);
        }
        outADeclaVariavelPvarDecl(node);
    }

    public void inADeclaGrupoPvarDeclAgrup(ADeclaGrupoPvarDeclAgrup node)
    {
        defaultIn(node);
    }

    public void outADeclaGrupoPvarDeclAgrup(ADeclaGrupoPvarDeclAgrup node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADeclaGrupoPvarDeclAgrup(ADeclaGrupoPvarDeclAgrup node)
    {
        inADeclaGrupoPvarDeclAgrup(node);
        if(node.getPvarSpec() != null)
        {
            node.getPvarSpec().apply(this);
        }
        outADeclaGrupoPvarDeclAgrup(node);
    }

    public void inAPvarDeclAgrup(APvarDeclAgrup node)
    {
        defaultIn(node);
    }

    public void outAPvarDeclAgrup(APvarDeclAgrup node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPvarDeclAgrup(APvarDeclAgrup node)
    {
        inAPvarDeclAgrup(node);
        if(node.getPvarDeclAgrupParen() != null)
        {
            node.getPvarDeclAgrupParen().apply(this);
        }
        if(node.getTabreParen() != null)
        {
            node.getTabreParen().apply(this);
        }
        outAPvarDeclAgrup(node);
    }

    public void inAPvarDeclAgrupLoopPvarDeclAgrupParen(APvarDeclAgrupLoopPvarDeclAgrupParen node)
    {
        defaultIn(node);
    }

    public void outAPvarDeclAgrupLoopPvarDeclAgrupParen(APvarDeclAgrupLoopPvarDeclAgrupParen node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPvarDeclAgrupLoopPvarDeclAgrupParen(APvarDeclAgrupLoopPvarDeclAgrupParen node)
    {
        inAPvarDeclAgrupLoopPvarDeclAgrupParen(node);
        if(node.getTfechaParen() != null)
        {
            node.getTfechaParen().apply(this);
        }
        outAPvarDeclAgrupLoopPvarDeclAgrupParen(node);
    }

    public void inAPvarDeclAgrupLoop(APvarDeclAgrupLoop node)
    {
        defaultIn(node);
    }

    public void outAPvarDeclAgrupLoop(APvarDeclAgrupLoop node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPvarDeclAgrupLoop(APvarDeclAgrupLoop node)
    {
        inAPvarDeclAgrupLoop(node);
        if(node.getTpontoEVirgula() != null)
        {
            node.getTpontoEVirgula().apply(this);
        }
        if(node.getPvarSpec() != null)
        {
            node.getPvarSpec().apply(this);
        }
        outAPvarDeclAgrupLoop(node);
    }

    public void inAPvarSpec(APvarSpec node)
    {
        defaultIn(node);
    }

    public void outAPvarSpec(APvarSpec node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPvarSpec(APvarSpec node)
    {
        inAPvarSpec(node);
        if(node.getPvarSpecAgrup() != null)
        {
            node.getPvarSpecAgrup().apply(this);
        }
        if(node.getPidentifierList() != null)
        {
            node.getPidentifierList().apply(this);
        }
        outAPvarSpec(node);
    }

    public void inAVariavelEspcPvarSpecAgrup(AVariavelEspcPvarSpecAgrup node)
    {
        defaultIn(node);
    }

    public void outAVariavelEspcPvarSpecAgrup(AVariavelEspcPvarSpecAgrup node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVariavelEspcPvarSpecAgrup(AVariavelEspcPvarSpecAgrup node)
    {
        inAVariavelEspcPvarSpecAgrup(node);
        if(node.getPvarSpecAgrupOpc() != null)
        {
            node.getPvarSpecAgrupOpc().apply(this);
        }
        if(node.getPtype() != null)
        {
            node.getPtype().apply(this);
        }
        outAVariavelEspcPvarSpecAgrup(node);
    }

    public void inAPvarSpecAgrup(APvarSpecAgrup node)
    {
        defaultIn(node);
    }

    public void outAPvarSpecAgrup(APvarSpecAgrup node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPvarSpecAgrup(APvarSpecAgrup node)
    {
        inAPvarSpecAgrup(node);
        if(node.getPexpressionList() != null)
        {
            node.getPexpressionList().apply(this);
        }
        if(node.getTigual() != null)
        {
            node.getTigual().apply(this);
        }
        outAPvarSpecAgrup(node);
    }

    public void inAPvarSpecAgrupOpc(APvarSpecAgrupOpc node)
    {
        defaultIn(node);
    }

    public void outAPvarSpecAgrupOpc(APvarSpecAgrupOpc node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPvarSpecAgrupOpc(APvarSpecAgrupOpc node)
    {
        inAPvarSpecAgrupOpc(node);
        if(node.getPexpressionList() != null)
        {
            node.getPexpressionList().apply(this);
        }
        if(node.getTigual() != null)
        {
            node.getTigual().apply(this);
        }
        outAPvarSpecAgrupOpc(node);
    }

    public void inAExpressaoPrimaPprimaryExpr(AExpressaoPrimaPprimaryExpr node)
    {
        defaultIn(node);
    }

    public void outAExpressaoPrimaPprimaryExpr(AExpressaoPrimaPprimaryExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpressaoPrimaPprimaryExpr(AExpressaoPrimaPprimaryExpr node)
    {
        inAExpressaoPrimaPprimaryExpr(node);
        if(node.getPoperand() != null)
        {
            node.getPoperand().apply(this);
        }
        outAExpressaoPrimaPprimaryExpr(node);
    }

    public void inAConversaoPprimaryExpr(AConversaoPprimaryExpr node)
    {
        defaultIn(node);
    }

    public void outAConversaoPprimaryExpr(AConversaoPprimaryExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAConversaoPprimaryExpr(AConversaoPprimaryExpr node)
    {
        inAConversaoPprimaryExpr(node);
        if(node.getPconversion() != null)
        {
            node.getPconversion().apply(this);
        }
        outAConversaoPprimaryExpr(node);
    }

    public void inAIndicePprimaryExpr(AIndicePprimaryExpr node)
    {
        defaultIn(node);
    }

    public void outAIndicePprimaryExpr(AIndicePprimaryExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIndicePprimaryExpr(AIndicePprimaryExpr node)
    {
        inAIndicePprimaryExpr(node);
        if(node.getPindex() != null)
        {
            node.getPindex().apply(this);
        }
        if(node.getPprimaryExpr() != null)
        {
            node.getPprimaryExpr().apply(this);
        }
        outAIndicePprimaryExpr(node);
    }

    public void inAArgumentosPprimaryExpr(AArgumentosPprimaryExpr node)
    {
        defaultIn(node);
    }

    public void outAArgumentosPprimaryExpr(AArgumentosPprimaryExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArgumentosPprimaryExpr(AArgumentosPprimaryExpr node)
    {
        inAArgumentosPprimaryExpr(node);
        if(node.getParguments() != null)
        {
            node.getParguments().apply(this);
        }
        if(node.getPprimaryExpr() != null)
        {
            node.getPprimaryExpr().apply(this);
        }
        outAArgumentosPprimaryExpr(node);
    }

    public void inALiteralPoperand(ALiteralPoperand node)
    {
        defaultIn(node);
    }

    public void outALiteralPoperand(ALiteralPoperand node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALiteralPoperand(ALiteralPoperand node)
    {
        inALiteralPoperand(node);
        if(node.getPliteral() != null)
        {
            node.getPliteral().apply(this);
        }
        outALiteralPoperand(node);
    }

    public void inATidentifierPoperand(ATidentifierPoperand node)
    {
        defaultIn(node);
    }

    public void outATidentifierPoperand(ATidentifierPoperand node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATidentifierPoperand(ATidentifierPoperand node)
    {
        inATidentifierPoperand(node);
        if(node.getTidentifier() != null)
        {
            node.getTidentifier().apply(this);
        }
        outATidentifierPoperand(node);
    }

    public void inATabreParenPoperand(ATabreParenPoperand node)
    {
        defaultIn(node);
    }

    public void outATabreParenPoperand(ATabreParenPoperand node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATabreParenPoperand(ATabreParenPoperand node)
    {
        inATabreParenPoperand(node);
        if(node.getTfechaParen() != null)
        {
            node.getTfechaParen().apply(this);
        }
        if(node.getPexpression() != null)
        {
            node.getPexpression().apply(this);
        }
        if(node.getTabreParen() != null)
        {
            node.getTabreParen().apply(this);
        }
        outATabreParenPoperand(node);
    }

    public void inABaseLiteralPliteral(ABaseLiteralPliteral node)
    {
        defaultIn(node);
    }

    public void outABaseLiteralPliteral(ABaseLiteralPliteral node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABaseLiteralPliteral(ABaseLiteralPliteral node)
    {
        inABaseLiteralPliteral(node);
        if(node.getPbasicLit() != null)
        {
            node.getPbasicLit().apply(this);
        }
        outABaseLiteralPliteral(node);
    }

    public void inACompositeLiteralPliteral(ACompositeLiteralPliteral node)
    {
        defaultIn(node);
    }

    public void outACompositeLiteralPliteral(ACompositeLiteralPliteral node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACompositeLiteralPliteral(ACompositeLiteralPliteral node)
    {
        inACompositeLiteralPliteral(node);
        if(node.getPcompositeLit() != null)
        {
            node.getPcompositeLit().apply(this);
        }
        outACompositeLiteralPliteral(node);
    }

    public void inAFuncaoListPliteral(AFuncaoListPliteral node)
    {
        defaultIn(node);
    }

    public void outAFuncaoListPliteral(AFuncaoListPliteral node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFuncaoListPliteral(AFuncaoListPliteral node)
    {
        inAFuncaoListPliteral(node);
        if(node.getPfunctionList() != null)
        {
            node.getPfunctionList().apply(this);
        }
        outAFuncaoListPliteral(node);
    }

    public void inAPbasicLit(APbasicLit node)
    {
        defaultIn(node);
    }

    public void outAPbasicLit(APbasicLit node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPbasicLit(APbasicLit node)
    {
        inAPbasicLit(node);
        if(node.getTnumero() != null)
        {
            node.getTnumero().apply(this);
        }
        outAPbasicLit(node);
    }

    public void inAPcompositeLit(APcompositeLit node)
    {
        defaultIn(node);
    }

    public void outAPcompositeLit(APcompositeLit node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPcompositeLit(APcompositeLit node)
    {
        inAPcompositeLit(node);
        if(node.getPliteralValue() != null)
        {
            node.getPliteralValue().apply(this);
        }
        if(node.getPliteralType() != null)
        {
            node.getPliteralType().apply(this);
        }
        outAPcompositeLit(node);
    }

    public void inAPliteralType(APliteralType node)
    {
        defaultIn(node);
    }

    public void outAPliteralType(APliteralType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPliteralType(APliteralType node)
    {
        inAPliteralType(node);
        if(node.getParrayType() != null)
        {
            node.getParrayType().apply(this);
        }
        outAPliteralType(node);
    }

    public void inATabreColchetePliteralType(ATabreColchetePliteralType node)
    {
        defaultIn(node);
    }

    public void outATabreColchetePliteralType(ATabreColchetePliteralType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATabreColchetePliteralType(ATabreColchetePliteralType node)
    {
        inATabreColchetePliteralType(node);
        if(node.getPelementType() != null)
        {
            node.getPelementType().apply(this);
        }
        if(node.getTfechaColchete() != null)
        {
            node.getTfechaColchete().apply(this);
        }
        if(node.getTellipsis() != null)
        {
            node.getTellipsis().apply(this);
        }
        if(node.getTabreColchete() != null)
        {
            node.getTabreColchete().apply(this);
        }
        outATabreColchetePliteralType(node);
    }

    public void inAPliteralValue(APliteralValue node)
    {
        defaultIn(node);
    }

    public void outAPliteralValue(APliteralValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPliteralValue(APliteralValue node)
    {
        inAPliteralValue(node);
        if(node.getTfechaChave() != null)
        {
            node.getTfechaChave().apply(this);
        }
        if(node.getPliteralValueOpc() != null)
        {
            node.getPliteralValueOpc().apply(this);
        }
        if(node.getTabreChave() != null)
        {
            node.getTabreChave().apply(this);
        }
        outAPliteralValue(node);
    }

    public void inAPliteralValueOpc(APliteralValueOpc node)
    {
        defaultIn(node);
    }

    public void outAPliteralValueOpc(APliteralValueOpc node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPliteralValueOpc(APliteralValueOpc node)
    {
        inAPliteralValueOpc(node);
        if(node.getTvirgula() != null)
        {
            node.getTvirgula().apply(this);
        }
        if(node.getPelementLit() != null)
        {
            node.getPelementLit().apply(this);
        }
        outAPliteralValueOpc(node);
    }

    public void inAElementoLoopPelementLit(AElementoLoopPelementLit node)
    {
        defaultIn(node);
    }

    public void outAElementoLoopPelementLit(AElementoLoopPelementLit node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAElementoLoopPelementLit(AElementoLoopPelementLit node)
    {
        inAElementoLoopPelementLit(node);
        if(node.getPelementLitLoop() != null)
        {
            node.getPelementLitLoop().apply(this);
        }
        outAElementoLoopPelementLit(node);
    }

    public void inAPelementLit(APelementLit node)
    {
        defaultIn(node);
    }

    public void outAPelementLit(APelementLit node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPelementLit(APelementLit node)
    {
        inAPelementLit(node);
        if(node.getPkeyedElement() != null)
        {
            node.getPkeyedElement().apply(this);
        }
        outAPelementLit(node);
    }

    public void inAPelementLitLoop(APelementLitLoop node)
    {
        defaultIn(node);
    }

    public void outAPelementLitLoop(APelementLitLoop node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPelementLitLoop(APelementLitLoop node)
    {
        inAPelementLitLoop(node);
        if(node.getPkeyedElement() != null)
        {
            node.getPkeyedElement().apply(this);
        }
        if(node.getTvirgula() != null)
        {
            node.getTvirgula().apply(this);
        }
        if(node.getPelementLit() != null)
        {
            node.getPelementLit().apply(this);
        }
        outAPelementLitLoop(node);
    }

    public void inAPkeyedElement(APkeyedElement node)
    {
        defaultIn(node);
    }

    public void outAPkeyedElement(APkeyedElement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPkeyedElement(APkeyedElement node)
    {
        inAPkeyedElement(node);
        if(node.getPelement() != null)
        {
            node.getPelement().apply(this);
        }
        if(node.getPkeyedElementOpc() != null)
        {
            node.getPkeyedElementOpc().apply(this);
        }
        outAPkeyedElement(node);
    }

    public void inAPkeyedElementOpc(APkeyedElementOpc node)
    {
        defaultIn(node);
    }

    public void outAPkeyedElementOpc(APkeyedElementOpc node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPkeyedElementOpc(APkeyedElementOpc node)
    {
        inAPkeyedElementOpc(node);
        if(node.getTdoispontos() != null)
        {
            node.getTdoispontos().apply(this);
        }
        if(node.getPkey() != null)
        {
            node.getPkey().apply(this);
        }
        outAPkeyedElementOpc(node);
    }

    public void inANmeCampoPkey(ANmeCampoPkey node)
    {
        defaultIn(node);
    }

    public void outANmeCampoPkey(ANmeCampoPkey node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANmeCampoPkey(ANmeCampoPkey node)
    {
        inANmeCampoPkey(node);
        if(node.getPfieldName() != null)
        {
            node.getPfieldName().apply(this);
        }
        outANmeCampoPkey(node);
    }

    public void inAExpressaoPkey(AExpressaoPkey node)
    {
        defaultIn(node);
    }

    public void outAExpressaoPkey(AExpressaoPkey node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpressaoPkey(AExpressaoPkey node)
    {
        inAExpressaoPkey(node);
        if(node.getPexpression() != null)
        {
            node.getPexpression().apply(this);
        }
        outAExpressaoPkey(node);
    }

    public void inAValorLiteralPkey(AValorLiteralPkey node)
    {
        defaultIn(node);
    }

    public void outAValorLiteralPkey(AValorLiteralPkey node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAValorLiteralPkey(AValorLiteralPkey node)
    {
        inAValorLiteralPkey(node);
        if(node.getPliteralValue() != null)
        {
            node.getPliteralValue().apply(this);
        }
        outAValorLiteralPkey(node);
    }

    public void inAPfieldName(APfieldName node)
    {
        defaultIn(node);
    }

    public void outAPfieldName(APfieldName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPfieldName(APfieldName node)
    {
        inAPfieldName(node);
        if(node.getTidentifier() != null)
        {
            node.getTidentifier().apply(this);
        }
        outAPfieldName(node);
    }

    public void inAExpressaoPelement(AExpressaoPelement node)
    {
        defaultIn(node);
    }

    public void outAExpressaoPelement(AExpressaoPelement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpressaoPelement(AExpressaoPelement node)
    {
        inAExpressaoPelement(node);
        if(node.getPexpression() != null)
        {
            node.getPexpression().apply(this);
        }
        outAExpressaoPelement(node);
    }

    public void inAPelement(APelement node)
    {
        defaultIn(node);
    }

    public void outAPelement(APelement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPelement(APelement node)
    {
        inAPelement(node);
        if(node.getPliteralValue() != null)
        {
            node.getPliteralValue().apply(this);
        }
        outAPelement(node);
    }

    public void inAPfunctionList(APfunctionList node)
    {
        defaultIn(node);
    }

    public void outAPfunctionList(APfunctionList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPfunctionList(APfunctionList node)
    {
        inAPfunctionList(node);
        if(node.getPfunction() != null)
        {
            node.getPfunction().apply(this);
        }
        if(node.getTfunc() != null)
        {
            node.getTfunc().apply(this);
        }
        outAPfunctionList(node);
    }

    public void inAPconversion(APconversion node)
    {
        defaultIn(node);
    }

    public void outAPconversion(APconversion node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPconversion(APconversion node)
    {
        inAPconversion(node);
        if(node.getTfechaParen() != null)
        {
            node.getTfechaParen().apply(this);
        }
        if(node.getTvirgula() != null)
        {
            node.getTvirgula().apply(this);
        }
        if(node.getPexpression() != null)
        {
            node.getPexpression().apply(this);
        }
        if(node.getTabreParen() != null)
        {
            node.getTabreParen().apply(this);
        }
        if(node.getPtype() != null)
        {
            node.getPtype().apply(this);
        }
        outAPconversion(node);
    }

    public void inAPindex(APindex node)
    {
        defaultIn(node);
    }

    public void outAPindex(APindex node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPindex(APindex node)
    {
        inAPindex(node);
        if(node.getTfechaColchete() != null)
        {
            node.getTfechaColchete().apply(this);
        }
        if(node.getPexpression() != null)
        {
            node.getPexpression().apply(this);
        }
        if(node.getTabreColchete() != null)
        {
            node.getTabreColchete().apply(this);
        }
        outAPindex(node);
    }

    public void inAParguments(AParguments node)
    {
        defaultIn(node);
    }

    public void outAParguments(AParguments node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParguments(AParguments node)
    {
        inAParguments(node);
        if(node.getTfechaParen() != null)
        {
            node.getTfechaParen().apply(this);
        }
        if(node.getPargumentsCorpo() != null)
        {
            node.getPargumentsCorpo().apply(this);
        }
        if(node.getTabreParen() != null)
        {
            node.getTabreParen().apply(this);
        }
        outAParguments(node);
    }

    public void inAPargumentsCorpo(APargumentsCorpo node)
    {
        defaultIn(node);
    }

    public void outAPargumentsCorpo(APargumentsCorpo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPargumentsCorpo(APargumentsCorpo node)
    {
        inAPargumentsCorpo(node);
        if(node.getTvirgula() != null)
        {
            node.getTvirgula().apply(this);
        }
        if(node.getTellipsis() != null)
        {
            node.getTellipsis().apply(this);
        }
        if(node.getPargumentsCorpoAgrup() != null)
        {
            node.getPargumentsCorpoAgrup().apply(this);
        }
        outAPargumentsCorpo(node);
    }

    public void inAListaExpressaoPargumentsCorpoAgrup(AListaExpressaoPargumentsCorpoAgrup node)
    {
        defaultIn(node);
    }

    public void outAListaExpressaoPargumentsCorpoAgrup(AListaExpressaoPargumentsCorpoAgrup node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAListaExpressaoPargumentsCorpoAgrup(AListaExpressaoPargumentsCorpoAgrup node)
    {
        inAListaExpressaoPargumentsCorpoAgrup(node);
        if(node.getPexpressionList() != null)
        {
            node.getPexpressionList().apply(this);
        }
        outAListaExpressaoPargumentsCorpoAgrup(node);
    }

    public void inATipoPargumentsCorpoAgrup(ATipoPargumentsCorpoAgrup node)
    {
        defaultIn(node);
    }

    public void outATipoPargumentsCorpoAgrup(ATipoPargumentsCorpoAgrup node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATipoPargumentsCorpoAgrup(ATipoPargumentsCorpoAgrup node)
    {
        inATipoPargumentsCorpoAgrup(node);
        if(node.getPexpressionList() != null)
        {
            node.getPexpressionList().apply(this);
        }
        if(node.getTvirgula() != null)
        {
            node.getTvirgula().apply(this);
        }
        if(node.getPtype() != null)
        {
            node.getPtype().apply(this);
        }
        outATipoPargumentsCorpoAgrup(node);
    }

    public void inAPblock(APblock node)
    {
        defaultIn(node);
    }

    public void outAPblock(APblock node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPblock(APblock node)
    {
        inAPblock(node);
        if(node.getTfechaChave() != null)
        {
            node.getTfechaChave().apply(this);
        }
        if(node.getPstatementList() != null)
        {
            node.getPstatementList().apply(this);
        }
        if(node.getTabreChave() != null)
        {
            node.getTabreChave().apply(this);
        }
        outAPblock(node);
    }

    public void inAPstatementListLoopPstatementList(APstatementListLoopPstatementList node)
    {
        defaultIn(node);
    }

    public void outAPstatementListLoopPstatementList(APstatementListLoopPstatementList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPstatementListLoopPstatementList(APstatementListLoopPstatementList node)
    {
        inAPstatementListLoopPstatementList(node);
        outAPstatementListLoopPstatementList(node);
    }

    public void inAPstatementListLoop(APstatementListLoop node)
    {
        defaultIn(node);
    }

    public void outAPstatementListLoop(APstatementListLoop node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPstatementListLoop(APstatementListLoop node)
    {
        inAPstatementListLoop(node);
        if(node.getTpontoEVirgula() != null)
        {
            node.getTpontoEVirgula().apply(this);
        }
        if(node.getPstatement() != null)
        {
            node.getPstatement().apply(this);
        }
        outAPstatementListLoop(node);
    }

    public void inADeclaracaoPstatement(ADeclaracaoPstatement node)
    {
        defaultIn(node);
    }

    public void outADeclaracaoPstatement(ADeclaracaoPstatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADeclaracaoPstatement(ADeclaracaoPstatement node)
    {
        inADeclaracaoPstatement(node);
        if(node.getPdeclaration() != null)
        {
            node.getPdeclaration().apply(this);
        }
        outADeclaracaoPstatement(node);
    }

    public void inAStmlSimplesPstatement(AStmlSimplesPstatement node)
    {
        defaultIn(node);
    }

    public void outAStmlSimplesPstatement(AStmlSimplesPstatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStmlSimplesPstatement(AStmlSimplesPstatement node)
    {
        inAStmlSimplesPstatement(node);
        if(node.getPsimpleStmt() != null)
        {
            node.getPsimpleStmt().apply(this);
        }
        outAStmlSimplesPstatement(node);
    }

    public void inARetornoPstatement(ARetornoPstatement node)
    {
        defaultIn(node);
    }

    public void outARetornoPstatement(ARetornoPstatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARetornoPstatement(ARetornoPstatement node)
    {
        inARetornoPstatement(node);
        if(node.getPreturnStmt() != null)
        {
            node.getPreturnStmt().apply(this);
        }
        outARetornoPstatement(node);
    }

    public void inABlocoPstatement(ABlocoPstatement node)
    {
        defaultIn(node);
    }

    public void outABlocoPstatement(ABlocoPstatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABlocoPstatement(ABlocoPstatement node)
    {
        inABlocoPstatement(node);
        if(node.getPblock() != null)
        {
            node.getPblock().apply(this);
        }
        outABlocoPstatement(node);
    }

    public void inAIfPstatement(AIfPstatement node)
    {
        defaultIn(node);
    }

    public void outAIfPstatement(AIfPstatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIfPstatement(AIfPstatement node)
    {
        inAIfPstatement(node);
        if(node.getPifStmt() != null)
        {
            node.getPifStmt().apply(this);
        }
        outAIfPstatement(node);
    }

    public void inAForPstatement(AForPstatement node)
    {
        defaultIn(node);
    }

    public void outAForPstatement(AForPstatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAForPstatement(AForPstatement node)
    {
        inAForPstatement(node);
        if(node.getPforStmt() != null)
        {
            node.getPforStmt().apply(this);
        }
        outAForPstatement(node);
    }

    public void inAVazioPsimpleStmt(AVazioPsimpleStmt node)
    {
        defaultIn(node);
    }

    public void outAVazioPsimpleStmt(AVazioPsimpleStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVazioPsimpleStmt(AVazioPsimpleStmt node)
    {
        inAVazioPsimpleStmt(node);
        if(node.getPemptyStmt() != null)
        {
            node.getPemptyStmt().apply(this);
        }
        outAVazioPsimpleStmt(node);
    }

    public void inAExpressaoPsimpleStmt(AExpressaoPsimpleStmt node)
    {
        defaultIn(node);
    }

    public void outAExpressaoPsimpleStmt(AExpressaoPsimpleStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpressaoPsimpleStmt(AExpressaoPsimpleStmt node)
    {
        inAExpressaoPsimpleStmt(node);
        if(node.getPexpressionStmt() != null)
        {
            node.getPexpressionStmt().apply(this);
        }
        outAExpressaoPsimpleStmt(node);
    }

    public void inAAssigmentPsimpleStmt(AAssigmentPsimpleStmt node)
    {
        defaultIn(node);
    }

    public void outAAssigmentPsimpleStmt(AAssigmentPsimpleStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAssigmentPsimpleStmt(AAssigmentPsimpleStmt node)
    {
        inAAssigmentPsimpleStmt(node);
        if(node.getPassignment() != null)
        {
            node.getPassignment().apply(this);
        }
        outAAssigmentPsimpleStmt(node);
    }

    public void inAShortPsimpleStmt(AShortPsimpleStmt node)
    {
        defaultIn(node);
    }

    public void outAShortPsimpleStmt(AShortPsimpleStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAShortPsimpleStmt(AShortPsimpleStmt node)
    {
        inAShortPsimpleStmt(node);
        if(node.getPshortpvarDecl() != null)
        {
            node.getPshortpvarDecl().apply(this);
        }
        outAShortPsimpleStmt(node);
    }

    public void inAPemptyStmt(APemptyStmt node)
    {
        defaultIn(node);
    }

    public void outAPemptyStmt(APemptyStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPemptyStmt(APemptyStmt node)
    {
        inAPemptyStmt(node);
        outAPemptyStmt(node);
    }

    public void inAPexpressionStmt(APexpressionStmt node)
    {
        defaultIn(node);
    }

    public void outAPexpressionStmt(APexpressionStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPexpressionStmt(APexpressionStmt node)
    {
        inAPexpressionStmt(node);
        if(node.getPexpression() != null)
        {
            node.getPexpression().apply(this);
        }
        outAPexpressionStmt(node);
    }

    public void inAListaExpressaoPassignment(AListaExpressaoPassignment node)
    {
        defaultIn(node);
    }

    public void outAListaExpressaoPassignment(AListaExpressaoPassignment node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAListaExpressaoPassignment(AListaExpressaoPassignment node)
    {
        inAListaExpressaoPassignment(node);
        if(node.getPassignmentFator() != null)
        {
            node.getPassignmentFator().apply(this);
        }
        if(node.getTigual() != null)
        {
            node.getTigual().apply(this);
        }
        if(node.getPexpressionList() != null)
        {
            node.getPexpressionList().apply(this);
        }
        outAListaExpressaoPassignment(node);
    }

    public void inAPassignmentFator(APassignmentFator node)
    {
        defaultIn(node);
    }

    public void outAPassignmentFator(APassignmentFator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPassignmentFator(APassignmentFator node)
    {
        inAPassignmentFator(node);
        if(node.getPexpressionList() != null)
        {
            node.getPexpressionList().apply(this);
        }
        outAPassignmentFator(node);
    }

    public void inAPshortpvarDecl(APshortpvarDecl node)
    {
        defaultIn(node);
    }

    public void outAPshortpvarDecl(APshortpvarDecl node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPshortpvarDecl(APshortpvarDecl node)
    {
        inAPshortpvarDecl(node);
        if(node.getPexpressionList() != null)
        {
            node.getPexpressionList().apply(this);
        }
        if(node.getTdeclaracaoAtribuicao() != null)
        {
            node.getTdeclaracaoAtribuicao().apply(this);
        }
        if(node.getPidentifierList() != null)
        {
            node.getPidentifierList().apply(this);
        }
        outAPshortpvarDecl(node);
    }

    public void inAPreturnStmt(APreturnStmt node)
    {
        defaultIn(node);
    }

    public void outAPreturnStmt(APreturnStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPreturnStmt(APreturnStmt node)
    {
        inAPreturnStmt(node);
        if(node.getPexpressionList() != null)
        {
            node.getPexpressionList().apply(this);
        }
        if(node.getTreturn() != null)
        {
            node.getTreturn().apply(this);
        }
        outAPreturnStmt(node);
    }

    public void inAPifStmt(APifStmt node)
    {
        defaultIn(node);
    }

    public void outAPifStmt(APifStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPifStmt(APifStmt node)
    {
        inAPifStmt(node);
        if(node.getPelse() != null)
        {
            node.getPelse().apply(this);
        }
        if(node.getPblock() != null)
        {
            node.getPblock().apply(this);
        }
        if(node.getPexpression() != null)
        {
            node.getPexpression().apply(this);
        }
        if(node.getPifStmtOpc() != null)
        {
            node.getPifStmtOpc().apply(this);
        }
        if(node.getTif() != null)
        {
            node.getTif().apply(this);
        }
        outAPifStmt(node);
    }

    public void inAPifStmtOpc(APifStmtOpc node)
    {
        defaultIn(node);
    }

    public void outAPifStmtOpc(APifStmtOpc node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPifStmtOpc(APifStmtOpc node)
    {
        inAPifStmtOpc(node);
        if(node.getTpontoEVirgula() != null)
        {
            node.getTpontoEVirgula().apply(this);
        }
        if(node.getPsimpleStmt() != null)
        {
            node.getPsimpleStmt().apply(this);
        }
        outAPifStmtOpc(node);
    }

    public void inAPelse(APelse node)
    {
        defaultIn(node);
    }

    public void outAPelse(APelse node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPelse(APelse node)
    {
        inAPelse(node);
        if(node.getPelseAgrup() != null)
        {
            node.getPelseAgrup().apply(this);
        }
        if(node.getTelse() != null)
        {
            node.getTelse().apply(this);
        }
        outAPelse(node);
    }

    public void inAIfPelseAgrup(AIfPelseAgrup node)
    {
        defaultIn(node);
    }

    public void outAIfPelseAgrup(AIfPelseAgrup node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIfPelseAgrup(AIfPelseAgrup node)
    {
        inAIfPelseAgrup(node);
        if(node.getPifStmt() != null)
        {
            node.getPifStmt().apply(this);
        }
        outAIfPelseAgrup(node);
    }

    public void inABlocoPelseAgrup(ABlocoPelseAgrup node)
    {
        defaultIn(node);
    }

    public void outABlocoPelseAgrup(ABlocoPelseAgrup node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABlocoPelseAgrup(ABlocoPelseAgrup node)
    {
        inABlocoPelseAgrup(node);
        if(node.getPblock() != null)
        {
            node.getPblock().apply(this);
        }
        outABlocoPelseAgrup(node);
    }

    public void inAPforStmt(APforStmt node)
    {
        defaultIn(node);
    }

    public void outAPforStmt(APforStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPforStmt(APforStmt node)
    {
        inAPforStmt(node);
        if(node.getPblock() != null)
        {
            node.getPblock().apply(this);
        }
        if(node.getPforStmtOpc() != null)
        {
            node.getPforStmtOpc().apply(this);
        }
        if(node.getTfor() != null)
        {
            node.getTfor().apply(this);
        }
        outAPforStmt(node);
    }

    public void inACondicaoPforStmtOpc(ACondicaoPforStmtOpc node)
    {
        defaultIn(node);
    }

    public void outACondicaoPforStmtOpc(ACondicaoPforStmtOpc node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACondicaoPforStmtOpc(ACondicaoPforStmtOpc node)
    {
        inACondicaoPforStmtOpc(node);
        if(node.getPcondition() != null)
        {
            node.getPcondition().apply(this);
        }
        outACondicaoPforStmtOpc(node);
    }

    public void inAClusuraForPforStmtOpc(AClusuraForPforStmtOpc node)
    {
        defaultIn(node);
    }

    public void outAClusuraForPforStmtOpc(AClusuraForPforStmtOpc node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAClusuraForPforStmtOpc(AClusuraForPforStmtOpc node)
    {
        inAClusuraForPforStmtOpc(node);
        if(node.getPforClause() != null)
        {
            node.getPforClause().apply(this);
        }
        outAClusuraForPforStmtOpc(node);
    }

    public void inAItervaloPforStmtOpc(AItervaloPforStmtOpc node)
    {
        defaultIn(node);
    }

    public void outAItervaloPforStmtOpc(AItervaloPforStmtOpc node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAItervaloPforStmtOpc(AItervaloPforStmtOpc node)
    {
        inAItervaloPforStmtOpc(node);
        if(node.getPrangeClause() != null)
        {
            node.getPrangeClause().apply(this);
        }
        outAItervaloPforStmtOpc(node);
    }

    public void inAPcondition(APcondition node)
    {
        defaultIn(node);
    }

    public void outAPcondition(APcondition node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPcondition(APcondition node)
    {
        inAPcondition(node);
        if(node.getPexpression() != null)
        {
            node.getPexpression().apply(this);
        }
        outAPcondition(node);
    }

    public void inAPforClause(APforClause node)
    {
        defaultIn(node);
    }

    public void outAPforClause(APforClause node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPforClause(APforClause node)
    {
        inAPforClause(node);
        if(node.getPforClauseFator() != null)
        {
            node.getPforClauseFator().apply(this);
        }
        if(node.getPcondition() != null)
        {
            node.getPcondition().apply(this);
        }
        if(node.getTpontoEVirgula() != null)
        {
            node.getTpontoEVirgula().apply(this);
        }
        if(node.getPinitStmt() != null)
        {
            node.getPinitStmt().apply(this);
        }
        outAPforClause(node);
    }

    public void inAPforClauseFator(APforClauseFator node)
    {
        defaultIn(node);
    }

    public void outAPforClauseFator(APforClauseFator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPforClauseFator(APforClauseFator node)
    {
        inAPforClauseFator(node);
        if(node.getPpostStmt() != null)
        {
            node.getPpostStmt().apply(this);
        }
        if(node.getTpontoEVirgula() != null)
        {
            node.getTpontoEVirgula().apply(this);
        }
        outAPforClauseFator(node);
    }

    public void inAPrangeClause(APrangeClause node)
    {
        defaultIn(node);
    }

    public void outAPrangeClause(APrangeClause node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrangeClause(APrangeClause node)
    {
        inAPrangeClause(node);
        if(node.getPexpression() != null)
        {
            node.getPexpression().apply(this);
        }
        if(node.getTrange() != null)
        {
            node.getTrange().apply(this);
        }
        if(node.getPrangeClauseOpc() != null)
        {
            node.getPrangeClauseOpc().apply(this);
        }
        outAPrangeClause(node);
    }

    public void inAListaExpressaoPrangeClauseOpc(AListaExpressaoPrangeClauseOpc node)
    {
        defaultIn(node);
    }

    public void outAListaExpressaoPrangeClauseOpc(AListaExpressaoPrangeClauseOpc node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAListaExpressaoPrangeClauseOpc(AListaExpressaoPrangeClauseOpc node)
    {
        inAListaExpressaoPrangeClauseOpc(node);
        if(node.getTigual() != null)
        {
            node.getTigual().apply(this);
        }
        if(node.getPexpressionList() != null)
        {
            node.getPexpressionList().apply(this);
        }
        outAListaExpressaoPrangeClauseOpc(node);
    }

    public void inAIdentificadorListaPrangeClauseOpc(AIdentificadorListaPrangeClauseOpc node)
    {
        defaultIn(node);
    }

    public void outAIdentificadorListaPrangeClauseOpc(AIdentificadorListaPrangeClauseOpc node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdentificadorListaPrangeClauseOpc(AIdentificadorListaPrangeClauseOpc node)
    {
        inAIdentificadorListaPrangeClauseOpc(node);
        if(node.getTdeclaracaoAtribuicao() != null)
        {
            node.getTdeclaracaoAtribuicao().apply(this);
        }
        if(node.getPidentifierList() != null)
        {
            node.getPidentifierList().apply(this);
        }
        outAIdentificadorListaPrangeClauseOpc(node);
    }

    public void inAPinitStmt(APinitStmt node)
    {
        defaultIn(node);
    }

    public void outAPinitStmt(APinitStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPinitStmt(APinitStmt node)
    {
        inAPinitStmt(node);
        if(node.getPsimpleStmt() != null)
        {
            node.getPsimpleStmt().apply(this);
        }
        outAPinitStmt(node);
    }

    public void inAPpostStmt(APpostStmt node)
    {
        defaultIn(node);
    }

    public void outAPpostStmt(APpostStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPpostStmt(APpostStmt node)
    {
        inAPpostStmt(node);
        if(node.getPsimpleStmt() != null)
        {
            node.getPsimpleStmt().apply(this);
        }
        outAPpostStmt(node);
    }
}
