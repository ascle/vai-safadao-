/* This file was generated by SableCC (http://www.sablecc.org/). */

package compilador.analysis;

import java.util.*;
import compilador.node.*;

public class ReversedDepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getEOF().apply(this);
        node.getPPbinaryExpr().apply(this);
        outStart(node);
    }

    public void inAAlogicoPbinaryExpr(AAlogicoPbinaryExpr node)
    {
        defaultIn(node);
    }

    public void outAAlogicoPbinaryExpr(AAlogicoPbinaryExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAlogicoPbinaryExpr(AAlogicoPbinaryExpr node)
    {
        inAAlogicoPbinaryExpr(node);
        if(node.getPbinaryLogicoExp() != null)
        {
            node.getPbinaryLogicoExp().apply(this);
        }
        outAAlogicoPbinaryExpr(node);
    }

    public void inAArelacionalPbinaryExpr(AArelacionalPbinaryExpr node)
    {
        defaultIn(node);
    }

    public void outAArelacionalPbinaryExpr(AArelacionalPbinaryExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArelacionalPbinaryExpr(AArelacionalPbinaryExpr node)
    {
        inAArelacionalPbinaryExpr(node);
        if(node.getPbinaryRelExp() != null)
        {
            node.getPbinaryRelExp().apply(this);
        }
        outAArelacionalPbinaryExpr(node);
    }

    public void inADfsdPbinaryExpr(ADfsdPbinaryExpr node)
    {
        defaultIn(node);
    }

    public void outADfsdPbinaryExpr(ADfsdPbinaryExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADfsdPbinaryExpr(ADfsdPbinaryExpr node)
    {
        inADfsdPbinaryExpr(node);
        if(node.getTidentifier() != null)
        {
            node.getTidentifier().apply(this);
        }
        outADfsdPbinaryExpr(node);
    }

    public void inAPbinaryLogicoExp(APbinaryLogicoExp node)
    {
        defaultIn(node);
    }

    public void outAPbinaryLogicoExp(APbinaryLogicoExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPbinaryLogicoExp(APbinaryLogicoExp node)
    {
        inAPbinaryLogicoExp(node);
        if(node.getTidentifier() != null)
        {
            node.getTidentifier().apply(this);
        }
        if(node.getTorLogico() != null)
        {
            node.getTorLogico().apply(this);
        }
        if(node.getPbinaryLogicoExp() != null)
        {
            node.getPbinaryLogicoExp().apply(this);
        }
        outAPbinaryLogicoExp(node);
    }

    public void inADsPbinaryLogicoExp(ADsPbinaryLogicoExp node)
    {
        defaultIn(node);
    }

    public void outADsPbinaryLogicoExp(ADsPbinaryLogicoExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADsPbinaryLogicoExp(ADsPbinaryLogicoExp node)
    {
        inADsPbinaryLogicoExp(node);
        if(node.getPbinaryLogicoFactor() != null)
        {
            node.getPbinaryLogicoFactor().apply(this);
        }
        outADsPbinaryLogicoExp(node);
    }

    public void inAPbinaryLogicoFactor(APbinaryLogicoFactor node)
    {
        defaultIn(node);
    }

    public void outAPbinaryLogicoFactor(APbinaryLogicoFactor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPbinaryLogicoFactor(APbinaryLogicoFactor node)
    {
        inAPbinaryLogicoFactor(node);
        if(node.getPbinaryLogicoFactorNot() != null)
        {
            node.getPbinaryLogicoFactorNot().apply(this);
        }
        if(node.getTandLogico() != null)
        {
            node.getTandLogico().apply(this);
        }
        if(node.getPbinaryLogicoFactor() != null)
        {
            node.getPbinaryLogicoFactor().apply(this);
        }
        outAPbinaryLogicoFactor(node);
    }

    public void inADsPbinaryLogicoFactor(ADsPbinaryLogicoFactor node)
    {
        defaultIn(node);
    }

    public void outADsPbinaryLogicoFactor(ADsPbinaryLogicoFactor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADsPbinaryLogicoFactor(ADsPbinaryLogicoFactor node)
    {
        inADsPbinaryLogicoFactor(node);
        if(node.getPbinaryLogicoFactorNot() != null)
        {
            node.getPbinaryLogicoFactorNot().apply(this);
        }
        outADsPbinaryLogicoFactor(node);
    }

    public void inAPbinaryLogicoFactorNot(APbinaryLogicoFactorNot node)
    {
        defaultIn(node);
    }

    public void outAPbinaryLogicoFactorNot(APbinaryLogicoFactorNot node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPbinaryLogicoFactorNot(APbinaryLogicoFactorNot node)
    {
        inAPbinaryLogicoFactorNot(node);
        if(node.getPbinaryExpr() != null)
        {
            node.getPbinaryExpr().apply(this);
        }
        if(node.getTnotLogico() != null)
        {
            node.getTnotLogico().apply(this);
        }
        outAPbinaryLogicoFactorNot(node);
    }

    public void inAOperandoPbinaryLogicoFactorNot(AOperandoPbinaryLogicoFactorNot node)
    {
        defaultIn(node);
    }

    public void outAOperandoPbinaryLogicoFactorNot(AOperandoPbinaryLogicoFactorNot node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOperandoPbinaryLogicoFactorNot(AOperandoPbinaryLogicoFactorNot node)
    {
        inAOperandoPbinaryLogicoFactorNot(node);
        if(node.getPbinaryExpr() != null)
        {
            node.getPbinaryExpr().apply(this);
        }
        outAOperandoPbinaryLogicoFactorNot(node);
    }

    public void inAPbinaryRelExp(APbinaryRelExp node)
    {
        defaultIn(node);
    }

    public void outAPbinaryRelExp(APbinaryRelExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPbinaryRelExp(APbinaryRelExp node)
    {
        inAPbinaryRelExp(node);
        if(node.getPbinaryExpr() != null)
        {
            node.getPbinaryExpr().apply(this);
        }
        if(node.getPrelOp() != null)
        {
            node.getPrelOp().apply(this);
        }
        if(node.getPbinaryRelExp() != null)
        {
            node.getPbinaryRelExp().apply(this);
        }
        outAPbinaryRelExp(node);
    }

    public void inAOperandoPbinaryRelExp(AOperandoPbinaryRelExp node)
    {
        defaultIn(node);
    }

    public void outAOperandoPbinaryRelExp(AOperandoPbinaryRelExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOperandoPbinaryRelExp(AOperandoPbinaryRelExp node)
    {
        inAOperandoPbinaryRelExp(node);
        if(node.getPbinaryExpr() != null)
        {
            node.getPbinaryExpr().apply(this);
        }
        outAOperandoPbinaryRelExp(node);
    }

    public void inATigualIgualPrelOp(ATigualIgualPrelOp node)
    {
        defaultIn(node);
    }

    public void outATigualIgualPrelOp(ATigualIgualPrelOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATigualIgualPrelOp(ATigualIgualPrelOp node)
    {
        inATigualIgualPrelOp(node);
        if(node.getTigualIgual() != null)
        {
            node.getTigualIgual().apply(this);
        }
        outATigualIgualPrelOp(node);
    }

    public void inATmenorPrelOp(ATmenorPrelOp node)
    {
        defaultIn(node);
    }

    public void outATmenorPrelOp(ATmenorPrelOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATmenorPrelOp(ATmenorPrelOp node)
    {
        inATmenorPrelOp(node);
        if(node.getTmenor() != null)
        {
            node.getTmenor().apply(this);
        }
        outATmenorPrelOp(node);
    }

    public void inATmaiorPrelOp(ATmaiorPrelOp node)
    {
        defaultIn(node);
    }

    public void outATmaiorPrelOp(ATmaiorPrelOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATmaiorPrelOp(ATmaiorPrelOp node)
    {
        inATmaiorPrelOp(node);
        if(node.getTmaior() != null)
        {
            node.getTmaior().apply(this);
        }
        outATmaiorPrelOp(node);
    }
}
