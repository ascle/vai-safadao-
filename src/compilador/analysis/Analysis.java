/* This file was generated by SableCC (http://www.sablecc.org/). */

package compilador.analysis;

import compilador.node.*;

public interface Analysis extends Switch
{
    Object getIn(Node node);
    void setIn(Node node, Object o);
    Object getOut(Node node);
    void setOut(Node node, Object o);

    void caseStart(Start node);
    void caseAPprogramLoopPprogram(APprogramLoopPprogram node);
    void caseAPprogramLoop(APprogramLoop node);
    void caseAPdeclarationPtopLevelDecl(APdeclarationPtopLevelDecl node);
    void caseAPfunctionDeclPtopLevelDecl(APfunctionDeclPtopLevelDecl node);
    void caseAPmethodDeclPtopLevelDecl(APmethodDeclPtopLevelDecl node);
    void caseAPconstDeclPdeclaration(APconstDeclPdeclaration node);
    void caseAPvarDeclPdeclaration(APvarDeclPdeclaration node);
    void caseAPfunctionDecl(APfunctionDecl node);
    void caseAPfunctionPfunctionDeclAgrup(APfunctionPfunctionDeclAgrup node);
    void caseAPsignaturePfunctionDeclAgrup(APsignaturePfunctionDeclAgrup node);
    void caseAPfunctionName(APfunctionName node);
    void caseAPfunction(APfunction node);
    void caseAPfunctionBody(APfunctionBody node);
    void caseAPmethodDecl(APmethodDecl node);
    void caseAPfunctionPmethodDeclAgrup(APfunctionPmethodDeclAgrup node);
    void caseAPsignaturePmethodDeclAgrup(APsignaturePmethodDeclAgrup node);
    void caseAPreceiver(APreceiver node);
    void caseAPmethodName(APmethodName node);
    void caseAPparameters(APparameters node);
    void caseAPparametersOp(APparametersOp node);
    void caseAPparameterListLoopPparameterList(APparameterListLoopPparameterList node);
    void caseAPparameterDeclPparameterList(APparameterDeclPparameterList node);
    void caseAPparameterListLoop(APparameterListLoop node);
    void caseAPparameterDecl(APparameterDecl node);
    void caseAPidentifierListPidentifierList(APidentifierListPidentifierList node);
    void caseAPidentifierList(APidentifierList node);
    void caseAPconstDecl(APconstDecl node);
    void caseAPconstSpecIdentPconstDecl2(APconstSpecIdentPconstDecl2 node);
    void caseAPconstDecl2(APconstDecl2 node);
    void caseAPconstDeclConteudoPconstDecl3(APconstDeclConteudoPconstDecl3 node);
    void caseAPconstDeclConteudo(APconstDeclConteudo node);
    void caseAPconstSpecIdent(APconstSpecIdent node);
    void caseAPconstSpec2PconstSpec(APconstSpec2PconstSpec node);
    void caseAPtypePconstSpec2(APtypePconstSpec2 node);
    void caseAPexpressionListLoopPexpressionList(APexpressionListLoopPexpressionList node);
    void caseAPexpressionList(APexpressionList node);
    void caseAPexpressionListLoop(APexpressionListLoop node);
    void caseAPunaryExprPexpression(APunaryExprPexpression node);
    void caseAPexpression(APexpression node);
    void caseAPbinaryLogicoExpPbinaryExpr(APbinaryLogicoExpPbinaryExpr node);
    void caseAPbinaryRelExpPbinaryExpr(APbinaryRelExpPbinaryExpr node);
    void caseAPbinaryAritExpPbinaryExpr(APbinaryAritExpPbinaryExpr node);
    void caseAPprimaryExprPunaryExpr(APprimaryExprPunaryExpr node);
    void caseAPunaryExpr(APunaryExpr node);
    void caseATadicaoPunaryOp(ATadicaoPunaryOp node);
    void caseATsubtracaoPunaryOp(ATsubtracaoPunaryOp node);
    void caseATnotLogicoPunaryOp(ATnotLogicoPunaryOp node);
    void caseAPbinaryLogicoExp(APbinaryLogicoExp node);
    void caseAPbinaryLogicoFactor(APbinaryLogicoFactor node);
    void caseAPbinaryLogicoTermo(APbinaryLogicoTermo node);
    void caseATidentifierPbinaryLogicoTermo(ATidentifierPbinaryLogicoTermo node);
    void caseAPbinaryRelExp(APbinaryRelExp node);
    void caseAPbinaryRelTermo(APbinaryRelTermo node);
    void caseATidentifierPbinaryRelTermo(ATidentifierPbinaryRelTermo node);
    void caseATigualIgualPrelOp(ATigualIgualPrelOp node);
    void caseATmenorPrelOp(ATmenorPrelOp node);
    void caseATmaiorPrelOp(ATmaiorPrelOp node);
    void caseAPbinaryAritExp(APbinaryAritExp node);
    void caseAPbinaryAritFactor(APbinaryAritFactor node);
    void caseAPbinaryAritTermo(APbinaryAritTermo node);
    void caseATsubtracaoPbinaryAritTermo(ATsubtracaoPbinaryAritTermo node);
    void caseATadicaoPaddOp(ATadicaoPaddOp node);
    void caseATsubtracaoPaddOp(ATsubtracaoPaddOp node);
    void caseATestrelaPmulOp(ATestrelaPmulOp node);
    void caseATbarraPmulOp(ATbarraPmulOp node);
    void caseAPtypeNamePtype(APtypeNamePtype node);
    void caseAPtypeListPtype(APtypeListPtype node);
    void caseAPtype(APtype node);
    void caseAPtypeName(APtypeName node);
    void caseATipoArrayPtypeList(ATipoArrayPtypeList node);
    void caseATipoFuncaoPtypeList(ATipoFuncaoPtypeList node);
    void caseAParrayType(AParrayType node);
    void caseAParrayLength(AParrayLength node);
    void caseAPelementType(APelementType node);
    void caseAPfunctionptype(APfunctionptype node);
    void caseAPsignature(APsignature node);
    void caseAParametrosPresult(AParametrosPresult node);
    void caseATipoPresult(ATipoPresult node);
    void caseAPparametersOpcional(APparametersOpcional node);
    void caseADeclaVariavelPvarDecl(ADeclaVariavelPvarDecl node);
    void caseADeclaGrupoPvarDeclAgrup(ADeclaGrupoPvarDeclAgrup node);
    void caseAPvarDeclAgrup(APvarDeclAgrup node);
    void caseAPvarDeclAgrupLoopPvarDeclAgrupParen(APvarDeclAgrupLoopPvarDeclAgrupParen node);
    void caseAPvarDeclAgrupLoop(APvarDeclAgrupLoop node);
    void caseAPvarSpec(APvarSpec node);
    void caseAVariavelEspcPvarSpecAgrup(AVariavelEspcPvarSpecAgrup node);
    void caseAPvarSpecAgrup(APvarSpecAgrup node);
    void caseAPvarSpecAgrupOpc(APvarSpecAgrupOpc node);
    void caseAExpressaoPrimaPprimaryExpr(AExpressaoPrimaPprimaryExpr node);
    void caseAConversaoPprimaryExpr(AConversaoPprimaryExpr node);
    void caseAIndicePprimaryExpr(AIndicePprimaryExpr node);
    void caseAArgumentosPprimaryExpr(AArgumentosPprimaryExpr node);
    void caseALiteralPoperand(ALiteralPoperand node);
    void caseATidentifierPoperand(ATidentifierPoperand node);
    void caseATabreParenPoperand(ATabreParenPoperand node);
    void caseABaseLiteralPliteral(ABaseLiteralPliteral node);
    void caseACompositeLiteralPliteral(ACompositeLiteralPliteral node);
    void caseAFuncaoListPliteral(AFuncaoListPliteral node);
    void caseAPbasicLit(APbasicLit node);
    void caseAPcompositeLit(APcompositeLit node);
    void caseAPliteralType(APliteralType node);
    void caseATabreColchetePliteralType(ATabreColchetePliteralType node);
    void caseAPliteralValue(APliteralValue node);
    void caseAPliteralValueOpc(APliteralValueOpc node);
    void caseAElementoLoopPelementLit(AElementoLoopPelementLit node);
    void caseAPelementLit(APelementLit node);
    void caseAPelementLitLoop(APelementLitLoop node);
    void caseAPkeyedElement(APkeyedElement node);
    void caseAPkeyedElementOpc(APkeyedElementOpc node);
    void caseANmeCampoPkey(ANmeCampoPkey node);
    void caseAExpressaoPkey(AExpressaoPkey node);
    void caseAValorLiteralPkey(AValorLiteralPkey node);
    void caseAPfieldName(APfieldName node);
    void caseAExpressaoPelement(AExpressaoPelement node);
    void caseAPelement(APelement node);
    void caseAPfunctionList(APfunctionList node);
    void caseAPconversion(APconversion node);
    void caseAPindex(APindex node);
    void caseAParguments(AParguments node);
    void caseAPargumentsCorpo(APargumentsCorpo node);
    void caseAListaExpressaoPargumentsCorpoAgrup(AListaExpressaoPargumentsCorpoAgrup node);
    void caseATipoPargumentsCorpoAgrup(ATipoPargumentsCorpoAgrup node);
    void caseAPblock(APblock node);
    void caseAPstatementListLoopPstatementList(APstatementListLoopPstatementList node);
    void caseAPstatementListLoop(APstatementListLoop node);
    void caseADeclaracaoPstatement(ADeclaracaoPstatement node);
    void caseAStmlSimplesPstatement(AStmlSimplesPstatement node);
    void caseARetornoPstatement(ARetornoPstatement node);
    void caseABlocoPstatement(ABlocoPstatement node);
    void caseAIfPstatement(AIfPstatement node);
    void caseAForPstatement(AForPstatement node);
    void caseAVazioPsimpleStmt(AVazioPsimpleStmt node);
    void caseAExpressaoPsimpleStmt(AExpressaoPsimpleStmt node);
    void caseAAssigmentPsimpleStmt(AAssigmentPsimpleStmt node);
    void caseAShortPsimpleStmt(AShortPsimpleStmt node);
    void caseAPemptyStmt(APemptyStmt node);
    void caseAPexpressionStmt(APexpressionStmt node);
    void caseAListaExpressaoPassignment(AListaExpressaoPassignment node);
    void caseAPassignmentFator(APassignmentFator node);
    void caseAPshortpvarDecl(APshortpvarDecl node);
    void caseAPreturnStmt(APreturnStmt node);
    void caseAPifStmt(APifStmt node);
    void caseAPifStmtOpc(APifStmtOpc node);
    void caseAPelse(APelse node);
    void caseAIfPelseAgrup(AIfPelseAgrup node);
    void caseABlocoPelseAgrup(ABlocoPelseAgrup node);
    void caseAPforStmt(APforStmt node);
    void caseACondicaoPforStmtOpc(ACondicaoPforStmtOpc node);
    void caseAClusuraForPforStmtOpc(AClusuraForPforStmtOpc node);
    void caseAItervaloPforStmtOpc(AItervaloPforStmtOpc node);
    void caseAPcondition(APcondition node);
    void caseAPforClause(APforClause node);
    void caseAPforClauseFator(APforClauseFator node);
    void caseAPrangeClause(APrangeClause node);
    void caseAListaExpressaoPrangeClauseOpc(AListaExpressaoPrangeClauseOpc node);
    void caseAIdentificadorListaPrangeClauseOpc(AIdentificadorListaPrangeClauseOpc node);
    void caseAPinitStmt(APinitStmt node);
    void caseAPpostStmt(APpostStmt node);

    void caseTTnumero(TTnumero node);
    void caseTTnumerooctal(TTnumerooctal node);
    void caseTTnumerohexa(TTnumerohexa node);
    void caseTTcommentLine(TTcommentLine node);
    void caseTTcomentBloco(TTcomentBloco node);
    void caseTTnomePrograma(TTnomePrograma node);
    void caseTTstring(TTstring node);
    void caseTTespaco(TTespaco node);
    void caseTTquebra(TTquebra node);
    void caseTTidentacao(TTidentacao node);
    void caseTTadicao(TTadicao node);
    void caseTTsubtracao(TTsubtracao node);
    void caseTTbarra(TTbarra node);
    void caseTTestrela(TTestrela node);
    void caseTTmenor(TTmenor node);
    void caseTTmenorIgual(TTmenorIgual node);
    void caseTTmaior(TTmaior node);
    void caseTTmaiorIgual(TTmaiorIgual node);
    void caseTTseta(TTseta node);
    void caseTTigualIgual(TTigualIgual node);
    void caseTTdiferente(TTdiferente node);
    void caseTTigual(TTigual node);
    void caseTTpontoEVirgula(TTpontoEVirgula node);
    void caseTTdelimitador(TTdelimitador node);
    void caseTTvirgula(TTvirgula node);
    void caseTTabreParen(TTabreParen node);
    void caseTTfechaParen(TTfechaParen node);
    void caseTTabreColchete(TTabreColchete node);
    void caseTTfechaColchete(TTfechaColchete node);
    void caseTTabreChave(TTabreChave node);
    void caseTTfechaChave(TTfechaChave node);
    void caseTTabreComent(TTabreComent node);
    void caseTTfechaComent(TTfechaComent node);
    void caseTTponto(TTponto node);
    void caseTTdoispontos(TTdoispontos node);
    void caseTTandLogico(TTandLogico node);
    void caseTTorLogico(TTorLogico node);
    void caseTTnotLogico(TTnotLogico node);
    void caseTTdeclaracaoAtribuicao(TTdeclaracaoAtribuicao node);
    void caseTTellipsis(TTellipsis node);
    void caseTTdefault(TTdefault node);
    void caseTTcase(TTcase node);
    void caseTTif(TTif node);
    void caseTTelse(TTelse node);
    void caseTTfunc(TTfunc node);
    void caseTTdefer(TTdefer node);
    void caseTTreturn(TTreturn node);
    void caseTTrange(TTrange node);
    void caseTTfor(TTfor node);
    void caseTTvar(TTvar node);
    void caseTTconst(TTconst node);
    void caseTTbool(TTbool node);
    void caseTTint32(TTint32 node);
    void caseTTint64(TTint64 node);
    void caseTTtipo(TTtipo node);
    void caseTTidentifier(TTidentifier node);
    void caseTTcharIgnored(TTcharIgnored node);
    void caseEOF(EOF node);
    void caseInvalidToken(InvalidToken node);
}
