Package compilador;
 
Helpers     
    hcharmin = ['a' .. 'z']+;
    hcharmai = ['A' .. 'Z']+;
    hchar = hcharmin|hcharmai;
    hdigito = ['0' .. '9']+;
    hdigito_octal = ['0' .. '7']+;
    hdigito_hexadecimal = (['0' .. '9'] | ['A' .. 'F'] | ['a' .. 'f'])+;
    hqualquer_char = [0x0 .. 0xffff];
    
    hunderscore = '_';
    
    hcr = 13 ;
    hlf = 10 ;
    htab = 9 ;
    hblank = ' ';
    hchar_ignored = hcr|hlf|(hblank hblank*)|htab|'\n';
    hnao_cr_lf = [hqualquer_char - [13 + 10]];
    hnao_estrela = [hqualquer_char - '*'];
    hnao_estrela_barra = [hnao_estrela - '/'];

    hponto_e_virgula = ';';
 
Tokens
    tnumero = hdigito+;
    tnumerooctal = '0' hdigito_octal+;
    tnumerohexa = '0' ('x'|'X') hdigito_hexadecimal+;
    
    tcomment_line = '//' [hqualquer_char - 10]* hchar_ignored*;
    tcoment_bloco = '/*' hnao_estrela* '*'+ (hnao_estrela_barra hnao_estrela* '*'+)* '/';
    
    tnome_programa = hcharmai (hcharmin|hcharmai)*;
    
    tstring = '"' [hnao_cr_lf - '"']+ '"';
    
    tespaco = hblank;
    tquebra = hcr hlf;
    
    tidentacao = htab;
    
    tadicao = '+';
    tsubtracao = '-';
    tbarra = '/';
    testrela = '*';
    
    tmenor = '<';
    tmenor_igual = '<=';
    tmaior = '>';
    tmaior_igual = '>=';
    
    tseta = '<-';
    tigual_igual = '==';
    tdiferente = '!=';
    tigual = '=';    
 
    tponto_e_virgula = hponto_e_virgula;
    tdelimitador = hponto_e_virgula;
    tvirgula = ',';
    tabre_paren = '(' ;
    tfecha_paren = ')' ;
    tabre_colchete = '[' ;
    tfecha_colchete = ']' ;
    tabre_chave = '{' ;
    tfecha_chave = '}' ;
    tabre_coment = '/*' ;
    tfecha_coment = '*/' ;
    tponto = '.';
    tdoispontos = ':';
    
   tand_logico = '&&';
   tor_logico = '||';
   tnot_logico = '!';
   tdeclaracao_atribuicao = ':=';
   tellipsis = '...';
    
   tdefault = 'default';
   tcase = 'case';
   tif = 'if';
   telse = 'else';
   tfunc = 'func';
   tdefer = 'defer';
   treturn = 'return';
   trange = 'range';
   tfor = 'for';
   tvar = 'var';
   tconst = 'const';
    
   tbool = 'bool';
   tint32 = 'int32';
   tint64 = 'int64';
   ttipo = ('bool' | 'int32' | 'int64');
    
   tidentifier = (hunderscore|hchar) (hchar|hdigito)*;
   tchar_ignored = hchar_ignored ;

Ignored Tokens
	tchar_ignored, tcomment_line, tespaco;


Productions 

// ************************ Inicio Expressão ************************
	
	// Expressão - reduce/reduce entre os tipos de expressão, se comenta uma funciona
  //	pexpression = {expressao} punary_expr;
  //              | pbinary_expr;
  	  	
  // Expressão binaria - reduce/reduce entre os tipos de espressão, se comentar uma funciona  
  	pbinary_expr =  {alogico} pbinary_logico_exp
          			 | {arelacional}  pbinary_rel_exp
                 | {dfsd} tidentifier;
  //  		    		 | {aaritmetica} pbinary_arit_exp;

	// Expressão unária OK(+5)
  /*
    punary_expr = {pprimary_expr}  pprimary_expr | 
                punary_op punary_expr ;
    punary_op = {tadicao} tadicao | 
              {tsubtracao} tsubtracao | 
              {tnot_logico} tnot_logico ;
    pprimary_expr = {expr_operando} poperand   ;
    poperand = {literal} pliteral 
            | {tidentifier} tidentifier 
            // susbstituir pexpression por punary_expr
            | {tabre_paren} tabre_paren punary_expr tfecha_paren ;
    pliteral = {base_literal} pbasic_lit ;
    pbasic_lit = tnumero; 
      */       
           

	// Operações binárias
	
	// operações lógicas OK
 	  pbinary_logico_exp = pbinary_logico_exp tor_logico tidentifier 
                        | {ds} pbinary_logico_factor;
  	pbinary_logico_factor = pbinary_logico_factor tand_logico pbinary_logico_factor_not
                            | {ds} pbinary_logico_factor_not;
  	pbinary_logico_factor_not = tnot_logico pbinary_expr
  					                   | {operando} pbinary_expr;


	// Operações relacionais OK
  	pbinary_rel_exp = pbinary_rel_exp prel_op pbinary_expr 
                    | {operando} pbinary_expr;
  	prel_op = {tigual_igual} tigual_igual 
            | {tmenor} tmenor 
            | {tmaior} tmaior ;

	// Operações aritmeticas OK
 /* 
  	pbinary_arit_exp = pbinary_arit_exp padd_op pbinary_arit_factor
                    | {fatoraritmetico} pbinary_arit_factor;
  	pbinary_arit_factor = pbinary_arit_factor pmul_op poperandx'x'
                        | {operando} pbinary_expr;
  	//pbinary_arit_termo = tabre_paren pbinary_arit_exp tfecha_paren 
    //                    | {identificador} tidentifier;
  	padd_op = {tadicao} tadicao 
            | {tsubtracao} tsubtracao ;
  	pmul_op = {testrela} testrela 
            | {tbarra} tbarra ;
*/            

// ************************ Fim Expressão ************************
